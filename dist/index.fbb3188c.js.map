{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-2976ee74ff50bee7.js","js/main.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","js/view.js","js/utilities.js","node_modules/date-fns/esm/index.js","node_modules/date-fns/esm/add/index.js","node_modules/date-fns/esm/addDays/index.js","node_modules/date-fns/esm/_lib/toInteger/index.js","node_modules/date-fns/esm/toDate/index.js","node_modules/date-fns/esm/_lib/requiredArgs/index.js","node_modules/date-fns/esm/addMonths/index.js","node_modules/date-fns/esm/addBusinessDays/index.js","node_modules/date-fns/esm/isWeekend/index.js","node_modules/date-fns/esm/isSunday/index.js","node_modules/date-fns/esm/isSaturday/index.js","node_modules/date-fns/esm/addHours/index.js","node_modules/date-fns/esm/addMilliseconds/index.js","node_modules/date-fns/esm/addISOWeekYears/index.js","node_modules/date-fns/esm/getISOWeekYear/index.js","node_modules/date-fns/esm/startOfISOWeek/index.js","node_modules/date-fns/esm/startOfWeek/index.js","node_modules/date-fns/esm/setISOWeekYear/index.js","node_modules/date-fns/esm/startOfISOWeekYear/index.js","node_modules/date-fns/esm/differenceInCalendarDays/index.js","node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","node_modules/date-fns/esm/startOfDay/index.js","node_modules/date-fns/esm/addMinutes/index.js","node_modules/date-fns/esm/addQuarters/index.js","node_modules/date-fns/esm/addSeconds/index.js","node_modules/date-fns/esm/addWeeks/index.js","node_modules/date-fns/esm/addYears/index.js","node_modules/date-fns/esm/areIntervalsOverlapping/index.js","node_modules/date-fns/esm/clamp/index.js","node_modules/date-fns/esm/max/index.js","node_modules/date-fns/esm/min/index.js","node_modules/date-fns/esm/closestIndexTo/index.js","node_modules/date-fns/esm/closestTo/index.js","node_modules/date-fns/esm/compareAsc/index.js","node_modules/date-fns/esm/compareDesc/index.js","node_modules/date-fns/esm/daysToWeeks/index.js","node_modules/date-fns/esm/constants/index.js","node_modules/date-fns/esm/differenceInBusinessDays/index.js","node_modules/date-fns/esm/isSameDay/index.js","node_modules/date-fns/esm/isValid/index.js","node_modules/date-fns/esm/isDate/index.js","node_modules/date-fns/esm/differenceInCalendarISOWeekYears/index.js","node_modules/date-fns/esm/differenceInCalendarISOWeeks/index.js","node_modules/date-fns/esm/differenceInCalendarMonths/index.js","node_modules/date-fns/esm/differenceInCalendarQuarters/index.js","node_modules/date-fns/esm/getQuarter/index.js","node_modules/date-fns/esm/differenceInCalendarWeeks/index.js","node_modules/date-fns/esm/differenceInCalendarYears/index.js","node_modules/date-fns/esm/differenceInDays/index.js","node_modules/date-fns/esm/differenceInHours/index.js","node_modules/date-fns/esm/differenceInMilliseconds/index.js","node_modules/date-fns/esm/_lib/roundingMethods/index.js","node_modules/date-fns/esm/differenceInISOWeekYears/index.js","node_modules/date-fns/esm/subISOWeekYears/index.js","node_modules/date-fns/esm/differenceInMinutes/index.js","node_modules/date-fns/esm/differenceInMonths/index.js","node_modules/date-fns/esm/isLastDayOfMonth/index.js","node_modules/date-fns/esm/endOfDay/index.js","node_modules/date-fns/esm/endOfMonth/index.js","node_modules/date-fns/esm/differenceInQuarters/index.js","node_modules/date-fns/esm/differenceInSeconds/index.js","node_modules/date-fns/esm/differenceInWeeks/index.js","node_modules/date-fns/esm/differenceInYears/index.js","node_modules/date-fns/esm/eachDayOfInterval/index.js","node_modules/date-fns/esm/eachHourOfInterval/index.js","node_modules/date-fns/esm/eachMinuteOfInterval/index.js","node_modules/date-fns/esm/startOfMinute/index.js","node_modules/date-fns/esm/eachMonthOfInterval/index.js","node_modules/date-fns/esm/eachQuarterOfInterval/index.js","node_modules/date-fns/esm/startOfQuarter/index.js","node_modules/date-fns/esm/eachWeekOfInterval/index.js","node_modules/date-fns/esm/eachWeekendOfInterval/index.js","node_modules/date-fns/esm/eachWeekendOfMonth/index.js","node_modules/date-fns/esm/startOfMonth/index.js","node_modules/date-fns/esm/eachWeekendOfYear/index.js","node_modules/date-fns/esm/startOfYear/index.js","node_modules/date-fns/esm/endOfYear/index.js","node_modules/date-fns/esm/eachYearOfInterval/index.js","node_modules/date-fns/esm/endOfDecade/index.js","node_modules/date-fns/esm/endOfHour/index.js","node_modules/date-fns/esm/endOfISOWeek/index.js","node_modules/date-fns/esm/endOfWeek/index.js","node_modules/date-fns/esm/endOfISOWeekYear/index.js","node_modules/date-fns/esm/endOfMinute/index.js","node_modules/date-fns/esm/endOfQuarter/index.js","node_modules/date-fns/esm/endOfSecond/index.js","node_modules/date-fns/esm/endOfToday/index.js","node_modules/date-fns/esm/endOfTomorrow/index.js","node_modules/date-fns/esm/endOfYesterday/index.js","node_modules/date-fns/esm/format/index.js","node_modules/date-fns/esm/locale/en-US/index.js","node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","node_modules/date-fns/esm/subMilliseconds/index.js","node_modules/date-fns/esm/_lib/format/formatters/index.js","node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","node_modules/date-fns/esm/_lib/getUTCWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","node_modules/date-fns/esm/_lib/format/longFormatters/index.js","node_modules/date-fns/esm/_lib/protectedTokens/index.js","node_modules/date-fns/esm/formatDistance/index.js","node_modules/date-fns/esm/_lib/cloneObject/index.js","node_modules/date-fns/esm/_lib/assign/index.js","node_modules/date-fns/esm/formatDistanceStrict/index.js","node_modules/date-fns/esm/formatDistanceToNow/index.js","node_modules/date-fns/esm/formatDistanceToNowStrict/index.js","node_modules/date-fns/esm/formatDuration/index.js","node_modules/date-fns/esm/formatISO/index.js","node_modules/date-fns/esm/formatISO9075/index.js","node_modules/date-fns/esm/formatISODuration/index.js","node_modules/date-fns/esm/formatRFC3339/index.js","node_modules/date-fns/esm/formatRFC7231/index.js","node_modules/date-fns/esm/formatRelative/index.js","node_modules/date-fns/esm/fromUnixTime/index.js","node_modules/date-fns/esm/getDate/index.js","node_modules/date-fns/esm/getDay/index.js","node_modules/date-fns/esm/getDayOfYear/index.js","node_modules/date-fns/esm/getDaysInMonth/index.js","node_modules/date-fns/esm/getDaysInYear/index.js","node_modules/date-fns/esm/isLeapYear/index.js","node_modules/date-fns/esm/getDecade/index.js","node_modules/date-fns/esm/getHours/index.js","node_modules/date-fns/esm/getISODay/index.js","node_modules/date-fns/esm/getISOWeek/index.js","node_modules/date-fns/esm/getISOWeeksInYear/index.js","node_modules/date-fns/esm/getMilliseconds/index.js","node_modules/date-fns/esm/getMinutes/index.js","node_modules/date-fns/esm/getMonth/index.js","node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js","node_modules/date-fns/esm/getSeconds/index.js","node_modules/date-fns/esm/getTime/index.js","node_modules/date-fns/esm/getUnixTime/index.js","node_modules/date-fns/esm/getWeek/index.js","node_modules/date-fns/esm/startOfWeekYear/index.js","node_modules/date-fns/esm/getWeekYear/index.js","node_modules/date-fns/esm/getWeekOfMonth/index.js","node_modules/date-fns/esm/getWeeksInMonth/index.js","node_modules/date-fns/esm/lastDayOfMonth/index.js","node_modules/date-fns/esm/getYear/index.js","node_modules/date-fns/esm/hoursToMilliseconds/index.js","node_modules/date-fns/esm/hoursToMinutes/index.js","node_modules/date-fns/esm/hoursToSeconds/index.js","node_modules/date-fns/esm/intervalToDuration/index.js","node_modules/date-fns/esm/sub/index.js","node_modules/date-fns/esm/subDays/index.js","node_modules/date-fns/esm/subMonths/index.js","node_modules/date-fns/esm/intlFormat/index.js","node_modules/date-fns/esm/isAfter/index.js","node_modules/date-fns/esm/isBefore/index.js","node_modules/date-fns/esm/isEqual/index.js","node_modules/date-fns/esm/isExists/index.js","node_modules/date-fns/esm/isFirstDayOfMonth/index.js","node_modules/date-fns/esm/isFriday/index.js","node_modules/date-fns/esm/isFuture/index.js","node_modules/date-fns/esm/isMatch/index.js","node_modules/date-fns/esm/parse/index.js","node_modules/date-fns/esm/parse/_lib/parsers/index.js","node_modules/date-fns/esm/_lib/setUTCDay/index.js","node_modules/date-fns/esm/_lib/setUTCISODay/index.js","node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","node_modules/date-fns/esm/_lib/setUTCWeek/index.js","node_modules/date-fns/esm/isMonday/index.js","node_modules/date-fns/esm/isPast/index.js","node_modules/date-fns/esm/isSameHour/index.js","node_modules/date-fns/esm/startOfHour/index.js","node_modules/date-fns/esm/isSameISOWeek/index.js","node_modules/date-fns/esm/isSameWeek/index.js","node_modules/date-fns/esm/isSameISOWeekYear/index.js","node_modules/date-fns/esm/isSameMinute/index.js","node_modules/date-fns/esm/isSameMonth/index.js","node_modules/date-fns/esm/isSameQuarter/index.js","node_modules/date-fns/esm/isSameSecond/index.js","node_modules/date-fns/esm/startOfSecond/index.js","node_modules/date-fns/esm/isSameYear/index.js","node_modules/date-fns/esm/isThisHour/index.js","node_modules/date-fns/esm/isThisISOWeek/index.js","node_modules/date-fns/esm/isThisMinute/index.js","node_modules/date-fns/esm/isThisMonth/index.js","node_modules/date-fns/esm/isThisQuarter/index.js","node_modules/date-fns/esm/isThisSecond/index.js","node_modules/date-fns/esm/isThisWeek/index.js","node_modules/date-fns/esm/isThisYear/index.js","node_modules/date-fns/esm/isThursday/index.js","node_modules/date-fns/esm/isToday/index.js","node_modules/date-fns/esm/isTomorrow/index.js","node_modules/date-fns/esm/isTuesday/index.js","node_modules/date-fns/esm/isWednesday/index.js","node_modules/date-fns/esm/isWithinInterval/index.js","node_modules/date-fns/esm/isYesterday/index.js","node_modules/date-fns/esm/lastDayOfDecade/index.js","node_modules/date-fns/esm/lastDayOfISOWeek/index.js","node_modules/date-fns/esm/lastDayOfWeek/index.js","node_modules/date-fns/esm/lastDayOfISOWeekYear/index.js","node_modules/date-fns/esm/lastDayOfQuarter/index.js","node_modules/date-fns/esm/lastDayOfYear/index.js","node_modules/date-fns/esm/lightFormat/index.js","node_modules/date-fns/esm/milliseconds/index.js","node_modules/date-fns/esm/millisecondsToHours/index.js","node_modules/date-fns/esm/millisecondsToMinutes/index.js","node_modules/date-fns/esm/millisecondsToSeconds/index.js","node_modules/date-fns/esm/minutesToHours/index.js","node_modules/date-fns/esm/minutesToMilliseconds/index.js","node_modules/date-fns/esm/minutesToSeconds/index.js","node_modules/date-fns/esm/monthsToQuarters/index.js","node_modules/date-fns/esm/monthsToYears/index.js","node_modules/date-fns/esm/nextDay/index.js","node_modules/date-fns/esm/nextFriday/index.js","node_modules/date-fns/esm/nextMonday/index.js","node_modules/date-fns/esm/nextSaturday/index.js","node_modules/date-fns/esm/nextSunday/index.js","node_modules/date-fns/esm/nextThursday/index.js","node_modules/date-fns/esm/nextTuesday/index.js","node_modules/date-fns/esm/nextWednesday/index.js","node_modules/date-fns/esm/parseISO/index.js","node_modules/date-fns/esm/parseJSON/index.js","node_modules/date-fns/esm/previousDay/index.js","node_modules/date-fns/esm/previousFriday/index.js","node_modules/date-fns/esm/previousMonday/index.js","node_modules/date-fns/esm/previousSaturday/index.js","node_modules/date-fns/esm/previousSunday/index.js","node_modules/date-fns/esm/previousThursday/index.js","node_modules/date-fns/esm/previousTuesday/index.js","node_modules/date-fns/esm/previousWednesday/index.js","node_modules/date-fns/esm/quartersToMonths/index.js","node_modules/date-fns/esm/quartersToYears/index.js","node_modules/date-fns/esm/roundToNearestMinutes/index.js","node_modules/date-fns/esm/secondsToHours/index.js","node_modules/date-fns/esm/secondsToMilliseconds/index.js","node_modules/date-fns/esm/secondsToMinutes/index.js","node_modules/date-fns/esm/set/index.js","node_modules/date-fns/esm/setMonth/index.js","node_modules/date-fns/esm/setDate/index.js","node_modules/date-fns/esm/setDay/index.js","node_modules/date-fns/esm/setDayOfYear/index.js","node_modules/date-fns/esm/setHours/index.js","node_modules/date-fns/esm/setISODay/index.js","node_modules/date-fns/esm/setISOWeek/index.js","node_modules/date-fns/esm/setMilliseconds/index.js","node_modules/date-fns/esm/setMinutes/index.js","node_modules/date-fns/esm/setQuarter/index.js","node_modules/date-fns/esm/setSeconds/index.js","node_modules/date-fns/esm/setWeek/index.js","node_modules/date-fns/esm/setWeekYear/index.js","node_modules/date-fns/esm/setYear/index.js","node_modules/date-fns/esm/startOfDecade/index.js","node_modules/date-fns/esm/startOfToday/index.js","node_modules/date-fns/esm/startOfTomorrow/index.js","node_modules/date-fns/esm/startOfYesterday/index.js","node_modules/date-fns/esm/subBusinessDays/index.js","node_modules/date-fns/esm/subHours/index.js","node_modules/date-fns/esm/subMinutes/index.js","node_modules/date-fns/esm/subQuarters/index.js","node_modules/date-fns/esm/subSeconds/index.js","node_modules/date-fns/esm/subWeeks/index.js","node_modules/date-fns/esm/subYears/index.js","node_modules/date-fns/esm/weeksToDays/index.js","node_modules/date-fns/esm/yearsToMonths/index.js","node_modules/date-fns/esm/yearsToQuarters/index.js","node_modules/js-cookie/dist/js.cookie.js","js/storage.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"106c69fefbb3188c\";\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else if ('reload' in location) {\n        location.reload();\n      } else {\n        // Web extension context\n        var ext = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n        if (ext && ext.runtime && ext.runtime.reload) {\n          ext.runtime.reload();\n        }\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        var oldDeps = modules[asset.id][1];\n\n        for (var dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            var id = oldDeps[dep];\n            var parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    var deps = modules[id][1];\n    var orphans = [];\n\n    for (var dep in deps) {\n      var parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(function (id) {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  var parents = getParents(module.bundle.root, id);\n  var accepted = false;\n\n  while (parents.length > 0) {\n    var v = parents.shift();\n    var a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      var p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push.apply(parents, _toConsumableArray(p));\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import {\n    UI_ELEMENTS,\n    changeParamsTabNow,\n    changeParamsTabDetails,\n    changeParamsTabForecast,\n    changeListCitiesByClickingHeartUI,\n} from \"./view.js\";\nimport {showSavedCitiesOnReload, Storage} from \"./storage.js\";\nimport {replaceHeart} from \"./utilities.js\";\nimport {addHours} from 'date-fns';\nimport Cookies from 'js-cookie';\n\nexport const savedCities = new Set();\nconst SERVER_URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst FORECAST_URL = 'https://api.openweathermap.org/data/2.5/forecast';\nconst API_KEY = '4783b73cfe02019303d03a9d793cc64b';\n\n\nUI_ELEMENTS.INPUT.addEventListener('keydown', async function (e) {\n    if (e.key === 'Enter') {\n        await getWeather();\n    }\n});\nUI_ELEMENTS.HEART.addEventListener('click', getWeather);\n\nexport async function getWeather(switchOfCity) {\n    const cityName = switchOfCity ?? UI_ELEMENTS.INPUT.value.trim();\n    const url = `${SERVER_URL}?q=${cityName}&appid=${API_KEY}`;\n\n    try {\n        const response = await fetch(url);\n        const weather = await response.json();\n\n        changeParamsTabNow(weather);\n        changeParamsTabDetails(weather);\n        await getForecastWeather(cityName);\n        Cookies.set('currentCity', weather.name, {expires: addHours(Date.now(), 1)});\n\n        const isCitySaved = savedCities.has(UI_ELEMENTS.NOW.CITY.textContent);\n        replaceHeart(isCitySaved);\n    }\n    catch (err) {\n        if (err.name === 'TypeError') {\n            alert(`${err.name}: undefined city`);\n        } else {\n            alert(err);\n        }\n    }\n    UI_ELEMENTS.INPUT.value = null;\n}\n\nasync function getForecastWeather(city) {\n    try {\n        const url = `${FORECAST_URL}?q=${city}&cnt=3&appid=${API_KEY}`;\n        const response = await fetch(url);\n        const weather = await response.json();\n        changeParamsTabForecast(weather);\n    }\n    catch (err) {\n        alert(err);\n    }\n}\n\nUI_ELEMENTS.NOW.HEART.addEventListener('click', changeListCitiesByClickingHeart);\n\nfunction changeListCitiesByClickingHeart() {\n    const cityNow = UI_ELEMENTS.NOW.CITY.textContent;\n    const savedCity = savedCities.has(cityNow);\n    const isNotEmptySavedList = UI_ELEMENTS.NOW.HEART.getAttribute('heart') === 'noChecked';\n\n    if (savedCity) {\n        savedCities.delete(cityNow);\n\n        const favoriteCities = new Storage(JSON.stringify([...savedCities]));\n        favoriteCities.set();\n    } else {\n        savedCities.add(cityNow);\n\n        const favoriteCities = new Storage(JSON.stringify([...savedCities]));\n        favoriteCities.set();\n    }\n\n    changeListCitiesByClickingHeartUI(savedCity, cityNow);\n    if (isNotEmptySavedList) chooseSavedCityOnClick();\n}\n\nexport function deleteCityByButtonClose() {\n    const closeButtonsList = document.querySelectorAll('.city-list__close-btn');\n\n    closeButtonsList[closeButtonsList.length - 1].addEventListener('click', function () {\n        const thisCity = this.previousElementSibling.textContent;\n        savedCities.delete(thisCity);\n        this.parentElement.remove();\n\n        const favoriteCities = new Storage(JSON.stringify([...savedCities]));\n        favoriteCities.set();\n        if (UI_ELEMENTS.NOW.CITY.textContent === thisCity) {\n            UI_ELEMENTS.NOW.HEART.setAttribute('heart', 'noChecked');\n        }\n    });\n}\n\nfunction chooseSavedCityOnClick() {\n    const cityList = document.querySelectorAll('.city');\n\n    cityList[cityList.length - 1].addEventListener('click', async function () {\n        const savedCity = this.textContent;\n        await getWeather(savedCity);\n    });\n}\n\nshowSavedCitiesOnReload();\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import {deleteCityByButtonClose} from \"./main.js\";\nimport {tempToCelsius} from \"./utilities.js\";\nimport {format} from \"date-fns\";\n\nexport const UI_ELEMENTS = {\n    INPUT: document.querySelector('.search__input'),\n    HEART: document.querySelector('.search__btn'),\n    TABS: document.querySelectorAll('.main-tabs__item'),\n    CITY_LIST: document.querySelector('.city-list'),\n\n    NOW: {\n        TEMPERATURE: document.querySelector('.weather-now__temperature'),\n        CITY: document.querySelector('.title-city-now'),\n        HEART: document.querySelector('.weather-now__btn'),\n        IMG: document.querySelector('.weather-now__img'),\n    },\n\n    DETAILS: {\n        TITLE: document.querySelector('.weather-details__title'),\n        TEMPERATURE: document.querySelector('.temperature'),\n        FEELS_LIKE: document.querySelector('.feels_like'),\n        WEATHER: document.querySelector('.weather'),\n        SUNRISE: document.querySelector('.sunrise'),\n        SUNSET: document.querySelector('.sunset'),\n    },\n    FORECAST: {\n        TITLE: document.querySelector('.weather-forecast__title'),\n        WEATHER_LIST: document.querySelectorAll('.weather-forecast__list-item'),\n        DATE: document.querySelectorAll('.weather-forecast__top'),\n        PARAMETERS: document.querySelectorAll('.weather-forecast__parameters'),\n        PRECIPITATION: document.querySelectorAll('.weather-forecast__precipitation'),\n    },\n\n    TEMPLATE_ELEMENT: {\n        CITY_ITEM: document.getElementById('city-item'),\n    },\n};\n\nfor (let tab of UI_ELEMENTS.TABS) {\n    tab.addEventListener('click', switchTab);\n}\n\nfunction switchTab() {\n    const navTab = document.querySelector('.main-tabs__item--active');\n    const activeTab = document.querySelector('.main-tabs__block--active');\n    navTab.classList.remove('main-tabs__item--active');\n    activeTab.classList.remove('main-tabs__block--active');\n\n    this.classList.add('main-tabs__item--active');\n    const idClickTab = this.getAttribute('href');\n    const idMainTabs = document.querySelector(idClickTab);\n    idMainTabs.classList.add('main-tabs__block--active');\n}\n\nexport function changeParamsTabNow(item) {\n    const {\n        main: {\n            temp: temperatureKelvin,\n        },\n        name: cityName,\n        weather: [{icon}]\n    } = item;\n\n    UI_ELEMENTS.NOW.TEMPERATURE.textContent = `${tempToCelsius(temperatureKelvin)}`;\n    UI_ELEMENTS.NOW.CITY.textContent = `${cityName}`;\n    UI_ELEMENTS.NOW.IMG.src = `https://openweathermap.org/img/wn/${icon}@4x.png`;\n}\n\nexport function changeParamsTabDetails(item) {\n    const {\n        name: cityName,\n        main: {\n            temp: temperatureKelvin,\n            feels_like: feelsLikeKelvin,\n        },\n        weather: [{main: cloudCover}],\n        sys: {\n            sunrise,\n            sunset,\n        },\n    } = item;\n    UI_ELEMENTS.DETAILS.TITLE.textContent = `${cityName}`;\n    UI_ELEMENTS.DETAILS.TEMPERATURE.textContent = `${tempToCelsius(temperatureKelvin)}`;\n    UI_ELEMENTS.DETAILS.FEELS_LIKE.textContent = `${tempToCelsius(feelsLikeKelvin)}`;\n    UI_ELEMENTS.DETAILS.WEATHER.textContent = `${cloudCover}`;\n    UI_ELEMENTS.DETAILS.SUNRISE.textContent = `${format(sunrise * 1000, 'HH')}:${format(sunrise * 1000, 'mm')}`;\n    UI_ELEMENTS.DETAILS.SUNSET.textContent = `${format(sunset * 1000, 'HH')}:${format(sunset * 1000, 'mm')}`;\n}\n\nexport function changeParamsTabForecast(item) {\n    const {\n        FORECAST: {\n            TITLE: titleForecast,\n            WEATHER_LIST: weatherList,\n            DATE: forecastDate,\n            PARAMETERS: tempParams,\n            PRECIPITATION: precipitation,\n        }\n    } = UI_ELEMENTS;\n\n    titleForecast.textContent = item.city.name;\n\n    weatherList.forEach((element, i) => {\n        const date = new Date(item.list[i].dt * 1000);\n        const icon = item.list[i].weather[0].icon;\n        forecastDate[i].firstElementChild.textContent = `${date.getDate()}  ${format(date, 'LLL')}`;\n        forecastDate[i].lastElementChild.textContent = `${format(date, 'HH')}:${format(date, 'mm')}`;\n        tempParams[i].firstElementChild.textContent = `Temperature: ${tempToCelsius(item.list[i].main.temp)}`;\n        tempParams[i].lastElementChild.textContent = `Feels like: ${tempToCelsius(item.list[i].main.feels_like)}`;\n        precipitation[i].firstElementChild.textContent = item.list[i].weather[0].main;\n        precipitation[i].lastElementChild.src = `https://openweathermap.org/img/wn/${icon}.png`;\n    });\n}\n\nexport function changeListCitiesByClickingHeartUI(savedCity, selectedCity) {\n    const templateCity = UI_ELEMENTS.TEMPLATE_ELEMENT.CITY_ITEM.content.cloneNode(true);\n\n    if (savedCity) {\n        const cityList = Array.from(document.querySelectorAll('.city-list__item'));\n        const element = cityList.findIndex(item => item.firstElementChild.textContent === selectedCity);\n        cityList[element].remove();\n\n        UI_ELEMENTS.NOW.HEART.setAttribute('heart', 'noChecked');\n    } else {\n        templateCity.firstElementChild.firstElementChild.textContent = selectedCity;\n        UI_ELEMENTS.CITY_LIST.append(templateCity);\n\n        UI_ELEMENTS.NOW.HEART.setAttribute('heart', 'checked');\n        \n        deleteCityByButtonClose();\n    }\n}\n\nexport function deleteCityByHeartCloseUI(element) {\n    element.parentElement.remove();\n\n    const thisCityIsSelected = element.previousElementSibling.textContent.trim() === UI_ELEMENTS.NOW.CITY.textContent;\n    if (thisCityIsSelected) {\n        UI_ELEMENTS.NOW.HEART.setAttribute('heart', 'noChecked');\n    }\n}\n","import {UI_ELEMENTS} from \"./view.js\";\n\nexport function tempToCelsius(tempKelvin) {\n    return `${Math.round(tempKelvin - 273.15)}°`;\n}\n\nexport function replaceHeart(cityInSaved) {\n    if (cityInSaved) {\n        UI_ELEMENTS.NOW.HEART.setAttribute('heart', 'checked');\n    } else {\n        UI_ELEMENTS.NOW.HEART.setAttribute('heart', 'noChecked');\n    }\n}\n","// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.\nexport { default as add } from \"./add/index.js\";\nexport { default as addBusinessDays } from \"./addBusinessDays/index.js\";\nexport { default as addDays } from \"./addDays/index.js\";\nexport { default as addHours } from \"./addHours/index.js\";\nexport { default as addISOWeekYears } from \"./addISOWeekYears/index.js\";\nexport { default as addMilliseconds } from \"./addMilliseconds/index.js\";\nexport { default as addMinutes } from \"./addMinutes/index.js\";\nexport { default as addMonths } from \"./addMonths/index.js\";\nexport { default as addQuarters } from \"./addQuarters/index.js\";\nexport { default as addSeconds } from \"./addSeconds/index.js\";\nexport { default as addWeeks } from \"./addWeeks/index.js\";\nexport { default as addYears } from \"./addYears/index.js\";\nexport { default as areIntervalsOverlapping } from \"./areIntervalsOverlapping/index.js\";\nexport { default as clamp } from \"./clamp/index.js\";\nexport { default as closestIndexTo } from \"./closestIndexTo/index.js\";\nexport { default as closestTo } from \"./closestTo/index.js\";\nexport { default as compareAsc } from \"./compareAsc/index.js\";\nexport { default as compareDesc } from \"./compareDesc/index.js\";\nexport { default as daysToWeeks } from \"./daysToWeeks/index.js\";\nexport { default as differenceInBusinessDays } from \"./differenceInBusinessDays/index.js\";\nexport { default as differenceInCalendarDays } from \"./differenceInCalendarDays/index.js\";\nexport { default as differenceInCalendarISOWeekYears } from \"./differenceInCalendarISOWeekYears/index.js\";\nexport { default as differenceInCalendarISOWeeks } from \"./differenceInCalendarISOWeeks/index.js\";\nexport { default as differenceInCalendarMonths } from \"./differenceInCalendarMonths/index.js\";\nexport { default as differenceInCalendarQuarters } from \"./differenceInCalendarQuarters/index.js\";\nexport { default as differenceInCalendarWeeks } from \"./differenceInCalendarWeeks/index.js\";\nexport { default as differenceInCalendarYears } from \"./differenceInCalendarYears/index.js\";\nexport { default as differenceInDays } from \"./differenceInDays/index.js\";\nexport { default as differenceInHours } from \"./differenceInHours/index.js\";\nexport { default as differenceInISOWeekYears } from \"./differenceInISOWeekYears/index.js\";\nexport { default as differenceInMilliseconds } from \"./differenceInMilliseconds/index.js\";\nexport { default as differenceInMinutes } from \"./differenceInMinutes/index.js\";\nexport { default as differenceInMonths } from \"./differenceInMonths/index.js\";\nexport { default as differenceInQuarters } from \"./differenceInQuarters/index.js\";\nexport { default as differenceInSeconds } from \"./differenceInSeconds/index.js\";\nexport { default as differenceInWeeks } from \"./differenceInWeeks/index.js\";\nexport { default as differenceInYears } from \"./differenceInYears/index.js\";\nexport { default as eachDayOfInterval } from \"./eachDayOfInterval/index.js\";\nexport { default as eachHourOfInterval } from \"./eachHourOfInterval/index.js\";\nexport { default as eachMinuteOfInterval } from \"./eachMinuteOfInterval/index.js\";\nexport { default as eachMonthOfInterval } from \"./eachMonthOfInterval/index.js\";\nexport { default as eachQuarterOfInterval } from \"./eachQuarterOfInterval/index.js\";\nexport { default as eachWeekOfInterval } from \"./eachWeekOfInterval/index.js\";\nexport { default as eachWeekendOfInterval } from \"./eachWeekendOfInterval/index.js\";\nexport { default as eachWeekendOfMonth } from \"./eachWeekendOfMonth/index.js\";\nexport { default as eachWeekendOfYear } from \"./eachWeekendOfYear/index.js\";\nexport { default as eachYearOfInterval } from \"./eachYearOfInterval/index.js\";\nexport { default as endOfDay } from \"./endOfDay/index.js\";\nexport { default as endOfDecade } from \"./endOfDecade/index.js\";\nexport { default as endOfHour } from \"./endOfHour/index.js\";\nexport { default as endOfISOWeek } from \"./endOfISOWeek/index.js\";\nexport { default as endOfISOWeekYear } from \"./endOfISOWeekYear/index.js\";\nexport { default as endOfMinute } from \"./endOfMinute/index.js\";\nexport { default as endOfMonth } from \"./endOfMonth/index.js\";\nexport { default as endOfQuarter } from \"./endOfQuarter/index.js\";\nexport { default as endOfSecond } from \"./endOfSecond/index.js\";\nexport { default as endOfToday } from \"./endOfToday/index.js\";\nexport { default as endOfTomorrow } from \"./endOfTomorrow/index.js\";\nexport { default as endOfWeek } from \"./endOfWeek/index.js\";\nexport { default as endOfYear } from \"./endOfYear/index.js\";\nexport { default as endOfYesterday } from \"./endOfYesterday/index.js\";\nexport { default as format } from \"./format/index.js\";\nexport { default as formatDistance } from \"./formatDistance/index.js\";\nexport { default as formatDistanceStrict } from \"./formatDistanceStrict/index.js\";\nexport { default as formatDistanceToNow } from \"./formatDistanceToNow/index.js\";\nexport { default as formatDistanceToNowStrict } from \"./formatDistanceToNowStrict/index.js\";\nexport { default as formatDuration } from \"./formatDuration/index.js\";\nexport { default as formatISO } from \"./formatISO/index.js\";\nexport { default as formatISO9075 } from \"./formatISO9075/index.js\";\nexport { default as formatISODuration } from \"./formatISODuration/index.js\";\nexport { default as formatRFC3339 } from \"./formatRFC3339/index.js\";\nexport { default as formatRFC7231 } from \"./formatRFC7231/index.js\";\nexport { default as formatRelative } from \"./formatRelative/index.js\";\nexport { default as fromUnixTime } from \"./fromUnixTime/index.js\";\nexport { default as getDate } from \"./getDate/index.js\";\nexport { default as getDay } from \"./getDay/index.js\";\nexport { default as getDayOfYear } from \"./getDayOfYear/index.js\";\nexport { default as getDaysInMonth } from \"./getDaysInMonth/index.js\";\nexport { default as getDaysInYear } from \"./getDaysInYear/index.js\";\nexport { default as getDecade } from \"./getDecade/index.js\";\nexport { default as getHours } from \"./getHours/index.js\";\nexport { default as getISODay } from \"./getISODay/index.js\";\nexport { default as getISOWeek } from \"./getISOWeek/index.js\";\nexport { default as getISOWeekYear } from \"./getISOWeekYear/index.js\";\nexport { default as getISOWeeksInYear } from \"./getISOWeeksInYear/index.js\";\nexport { default as getMilliseconds } from \"./getMilliseconds/index.js\";\nexport { default as getMinutes } from \"./getMinutes/index.js\";\nexport { default as getMonth } from \"./getMonth/index.js\";\nexport { default as getOverlappingDaysInIntervals } from \"./getOverlappingDaysInIntervals/index.js\";\nexport { default as getQuarter } from \"./getQuarter/index.js\";\nexport { default as getSeconds } from \"./getSeconds/index.js\";\nexport { default as getTime } from \"./getTime/index.js\";\nexport { default as getUnixTime } from \"./getUnixTime/index.js\";\nexport { default as getWeek } from \"./getWeek/index.js\";\nexport { default as getWeekOfMonth } from \"./getWeekOfMonth/index.js\";\nexport { default as getWeekYear } from \"./getWeekYear/index.js\";\nexport { default as getWeeksInMonth } from \"./getWeeksInMonth/index.js\";\nexport { default as getYear } from \"./getYear/index.js\";\nexport { default as hoursToMilliseconds } from \"./hoursToMilliseconds/index.js\";\nexport { default as hoursToMinutes } from \"./hoursToMinutes/index.js\";\nexport { default as hoursToSeconds } from \"./hoursToSeconds/index.js\";\nexport { default as intervalToDuration } from \"./intervalToDuration/index.js\";\nexport { default as intlFormat } from \"./intlFormat/index.js\";\nexport { default as isAfter } from \"./isAfter/index.js\";\nexport { default as isBefore } from \"./isBefore/index.js\";\nexport { default as isDate } from \"./isDate/index.js\";\nexport { default as isEqual } from \"./isEqual/index.js\";\nexport { default as isExists } from \"./isExists/index.js\";\nexport { default as isFirstDayOfMonth } from \"./isFirstDayOfMonth/index.js\";\nexport { default as isFriday } from \"./isFriday/index.js\";\nexport { default as isFuture } from \"./isFuture/index.js\";\nexport { default as isLastDayOfMonth } from \"./isLastDayOfMonth/index.js\";\nexport { default as isLeapYear } from \"./isLeapYear/index.js\";\nexport { default as isMatch } from \"./isMatch/index.js\";\nexport { default as isMonday } from \"./isMonday/index.js\";\nexport { default as isPast } from \"./isPast/index.js\";\nexport { default as isSameDay } from \"./isSameDay/index.js\";\nexport { default as isSameHour } from \"./isSameHour/index.js\";\nexport { default as isSameISOWeek } from \"./isSameISOWeek/index.js\";\nexport { default as isSameISOWeekYear } from \"./isSameISOWeekYear/index.js\";\nexport { default as isSameMinute } from \"./isSameMinute/index.js\";\nexport { default as isSameMonth } from \"./isSameMonth/index.js\";\nexport { default as isSameQuarter } from \"./isSameQuarter/index.js\";\nexport { default as isSameSecond } from \"./isSameSecond/index.js\";\nexport { default as isSameWeek } from \"./isSameWeek/index.js\";\nexport { default as isSameYear } from \"./isSameYear/index.js\";\nexport { default as isSaturday } from \"./isSaturday/index.js\";\nexport { default as isSunday } from \"./isSunday/index.js\";\nexport { default as isThisHour } from \"./isThisHour/index.js\";\nexport { default as isThisISOWeek } from \"./isThisISOWeek/index.js\";\nexport { default as isThisMinute } from \"./isThisMinute/index.js\";\nexport { default as isThisMonth } from \"./isThisMonth/index.js\";\nexport { default as isThisQuarter } from \"./isThisQuarter/index.js\";\nexport { default as isThisSecond } from \"./isThisSecond/index.js\";\nexport { default as isThisWeek } from \"./isThisWeek/index.js\";\nexport { default as isThisYear } from \"./isThisYear/index.js\";\nexport { default as isThursday } from \"./isThursday/index.js\";\nexport { default as isToday } from \"./isToday/index.js\";\nexport { default as isTomorrow } from \"./isTomorrow/index.js\";\nexport { default as isTuesday } from \"./isTuesday/index.js\";\nexport { default as isValid } from \"./isValid/index.js\";\nexport { default as isWednesday } from \"./isWednesday/index.js\";\nexport { default as isWeekend } from \"./isWeekend/index.js\";\nexport { default as isWithinInterval } from \"./isWithinInterval/index.js\";\nexport { default as isYesterday } from \"./isYesterday/index.js\";\nexport { default as lastDayOfDecade } from \"./lastDayOfDecade/index.js\";\nexport { default as lastDayOfISOWeek } from \"./lastDayOfISOWeek/index.js\";\nexport { default as lastDayOfISOWeekYear } from \"./lastDayOfISOWeekYear/index.js\";\nexport { default as lastDayOfMonth } from \"./lastDayOfMonth/index.js\";\nexport { default as lastDayOfQuarter } from \"./lastDayOfQuarter/index.js\";\nexport { default as lastDayOfWeek } from \"./lastDayOfWeek/index.js\";\nexport { default as lastDayOfYear } from \"./lastDayOfYear/index.js\";\nexport { default as lightFormat } from \"./lightFormat/index.js\";\nexport { default as max } from \"./max/index.js\";\nexport { default as milliseconds } from \"./milliseconds/index.js\";\nexport { default as millisecondsToHours } from \"./millisecondsToHours/index.js\";\nexport { default as millisecondsToMinutes } from \"./millisecondsToMinutes/index.js\";\nexport { default as millisecondsToSeconds } from \"./millisecondsToSeconds/index.js\";\nexport { default as min } from \"./min/index.js\";\nexport { default as minutesToHours } from \"./minutesToHours/index.js\";\nexport { default as minutesToMilliseconds } from \"./minutesToMilliseconds/index.js\";\nexport { default as minutesToSeconds } from \"./minutesToSeconds/index.js\";\nexport { default as monthsToQuarters } from \"./monthsToQuarters/index.js\";\nexport { default as monthsToYears } from \"./monthsToYears/index.js\";\nexport { default as nextDay } from \"./nextDay/index.js\";\nexport { default as nextFriday } from \"./nextFriday/index.js\";\nexport { default as nextMonday } from \"./nextMonday/index.js\";\nexport { default as nextSaturday } from \"./nextSaturday/index.js\";\nexport { default as nextSunday } from \"./nextSunday/index.js\";\nexport { default as nextThursday } from \"./nextThursday/index.js\";\nexport { default as nextTuesday } from \"./nextTuesday/index.js\";\nexport { default as nextWednesday } from \"./nextWednesday/index.js\";\nexport { default as parse } from \"./parse/index.js\";\nexport { default as parseISO } from \"./parseISO/index.js\";\nexport { default as parseJSON } from \"./parseJSON/index.js\";\nexport { default as previousDay } from \"./previousDay/index.js\";\nexport { default as previousFriday } from \"./previousFriday/index.js\";\nexport { default as previousMonday } from \"./previousMonday/index.js\";\nexport { default as previousSaturday } from \"./previousSaturday/index.js\";\nexport { default as previousSunday } from \"./previousSunday/index.js\";\nexport { default as previousThursday } from \"./previousThursday/index.js\";\nexport { default as previousTuesday } from \"./previousTuesday/index.js\";\nexport { default as previousWednesday } from \"./previousWednesday/index.js\";\nexport { default as quartersToMonths } from \"./quartersToMonths/index.js\";\nexport { default as quartersToYears } from \"./quartersToYears/index.js\";\nexport { default as roundToNearestMinutes } from \"./roundToNearestMinutes/index.js\";\nexport { default as secondsToHours } from \"./secondsToHours/index.js\";\nexport { default as secondsToMilliseconds } from \"./secondsToMilliseconds/index.js\";\nexport { default as secondsToMinutes } from \"./secondsToMinutes/index.js\";\nexport { default as set } from \"./set/index.js\";\nexport { default as setDate } from \"./setDate/index.js\";\nexport { default as setDay } from \"./setDay/index.js\";\nexport { default as setDayOfYear } from \"./setDayOfYear/index.js\";\nexport { default as setHours } from \"./setHours/index.js\";\nexport { default as setISODay } from \"./setISODay/index.js\";\nexport { default as setISOWeek } from \"./setISOWeek/index.js\";\nexport { default as setISOWeekYear } from \"./setISOWeekYear/index.js\";\nexport { default as setMilliseconds } from \"./setMilliseconds/index.js\";\nexport { default as setMinutes } from \"./setMinutes/index.js\";\nexport { default as setMonth } from \"./setMonth/index.js\";\nexport { default as setQuarter } from \"./setQuarter/index.js\";\nexport { default as setSeconds } from \"./setSeconds/index.js\";\nexport { default as setWeek } from \"./setWeek/index.js\";\nexport { default as setWeekYear } from \"./setWeekYear/index.js\";\nexport { default as setYear } from \"./setYear/index.js\";\nexport { default as startOfDay } from \"./startOfDay/index.js\";\nexport { default as startOfDecade } from \"./startOfDecade/index.js\";\nexport { default as startOfHour } from \"./startOfHour/index.js\";\nexport { default as startOfISOWeek } from \"./startOfISOWeek/index.js\";\nexport { default as startOfISOWeekYear } from \"./startOfISOWeekYear/index.js\";\nexport { default as startOfMinute } from \"./startOfMinute/index.js\";\nexport { default as startOfMonth } from \"./startOfMonth/index.js\";\nexport { default as startOfQuarter } from \"./startOfQuarter/index.js\";\nexport { default as startOfSecond } from \"./startOfSecond/index.js\";\nexport { default as startOfToday } from \"./startOfToday/index.js\";\nexport { default as startOfTomorrow } from \"./startOfTomorrow/index.js\";\nexport { default as startOfWeek } from \"./startOfWeek/index.js\";\nexport { default as startOfWeekYear } from \"./startOfWeekYear/index.js\";\nexport { default as startOfYear } from \"./startOfYear/index.js\";\nexport { default as startOfYesterday } from \"./startOfYesterday/index.js\";\nexport { default as sub } from \"./sub/index.js\";\nexport { default as subBusinessDays } from \"./subBusinessDays/index.js\";\nexport { default as subDays } from \"./subDays/index.js\";\nexport { default as subHours } from \"./subHours/index.js\";\nexport { default as subISOWeekYears } from \"./subISOWeekYears/index.js\";\nexport { default as subMilliseconds } from \"./subMilliseconds/index.js\";\nexport { default as subMinutes } from \"./subMinutes/index.js\";\nexport { default as subMonths } from \"./subMonths/index.js\";\nexport { default as subQuarters } from \"./subQuarters/index.js\";\nexport { default as subSeconds } from \"./subSeconds/index.js\";\nexport { default as subWeeks } from \"./subWeeks/index.js\";\nexport { default as subYears } from \"./subYears/index.js\";\nexport { default as toDate } from \"./toDate/index.js\";\nexport { default as weeksToDays } from \"./weeksToDays/index.js\";\nexport { default as yearsToMonths } from \"./yearsToMonths/index.js\";\nexport { default as yearsToQuarters } from \"./yearsToQuarters/index.js\";\nexport * from \"./constants/index.js\";","import addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import isWeekend from \"../isWeekend/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isSunday from \"../isSunday/index.js\";\nimport isSaturday from \"../isSaturday/index.js\";\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var startedOnWeekend = isWeekend(date);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) return new Date(NaN);\n  var hours = date.getHours();\n  var sign = amount < 0 ? -1 : 1;\n  var fullWeeks = toInteger(amount / 5);\n  date.setDate(date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n  var restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    date.setDate(date.getDate() + sign);\n    if (!isWeekend(date)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && isWeekend(date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if (isSaturday(date)) date.setDate(date.getDate() + (sign < 0 ? 2 : -1));\n    if (isSunday(date)) date.setDate(date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  date.setHours(hours);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date falls on a weekend\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * const result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\n\nexport default function isWeekend(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSunday\n * @category Weekday Helpers\n * @summary Is the given date Sunday?\n *\n * @description\n * Is the given date Sunday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 21 September 2014 Sunday?\n * var result = isSunday(new Date(2014, 8, 21))\n * //=> true\n */\n\nexport default function isSunday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 0;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSaturday\n * @category Weekday Helpers\n * @summary Is the given date Saturday?\n *\n * @description\n * Is the given date Saturday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 27 September 2014 Saturday?\n * var result = isSaturday(new Date(2014, 8, 27))\n * //=> true\n */\n\nexport default function isSaturday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 6;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport setISOWeekYear from \"../setISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Add the specified number of ISO week-numbering years to the given date.\n *\n * @description\n * Add the specified number of ISO week-numbering years to the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `addISOYears` to `addISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 ISO week-numbering years to 2 July 2010:\n * const result = addISOWeekYears(new Date(2010, 6, 2), 5)\n * //=> Fri Jun 26 2015 00:00:00\n */\n\nexport default function addISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return setISOWeekYear(dirtyDate, getISOWeekYear(dirtyDate) + amount);\n}","import toDate from \"../toDate/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getISOYear` to `getISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\nexport default function getISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Set the ISO week-numbering year to the given date.\n *\n * @description\n * Set the ISO week-numbering year to the given date,\n * saving the week number and the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `setISOYear` to `setISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeekYear - the ISO week-numbering year of the new date\n * @returns {Date} the new date with the ISO week-numbering year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set ISO week-numbering year 2007 to 29 December 2008:\n * const result = setISOWeekYear(new Date(2008, 11, 29), 2007)\n * //=> Mon Jan 01 2007 00:00:00\n */\n\nexport default function setISOWeekYear(dirtyDate, dirtyISOWeekYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeekYear = toInteger(dirtyISOWeekYear);\n  var diff = differenceInCalendarDays(date, startOfISOWeekYear(date));\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(isoWeekYear, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  date = startOfISOWeekYear(fourthOfJanuary);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\n\nexport default function addQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var months = amount * 3;\n  return addMonths(dirtyDate, months);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   areRangesOverlapping(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   areIntervalsOverlapping(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\n * @returns {Boolean} whether the time intervals are overlapping\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    inclusive: false\n  };\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","import max from \"../max/index.js\";\nimport min from \"../min/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name clamp\n * @category Interval Helpers\n * @summary Return a date bounded by the start and the end of the given interval\n *\n * @description\n * Clamps a date to the lower bound with the start of the interval and the upper\n * bound with the end of the interval.\n *\n * - When the date is less than the start of the interval, the start is returned.\n * - When the date is greater than the end of the interval, the end is returned.\n * - Otherwise the date is returned.\n *\n * @example\n * // What is Mar, 21, 2021 bounded to an interval starting at Mar, 22, 2021 and ending at Apr, 01, 2021\n * const result = clamp(new Date(2021, 2, 21), {\n *   start: new Date(2021, 2, 22),\n *   end: new Date(2021, 3, 1),\n * })\n * //=> Mon Mar 22 2021 00:00:00\n *\n * @param {Date | Number} date - the date to be bounded\n * @param {Interval} interval - the interval to bound to\n * @returns {Date} the date bounded by the start and the end of the interval\n * @throws {TypeError} 2 arguments required\n */\n\nexport default function clamp(date, _ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  requiredArgs(2, arguments);\n  return min([max([date, start]), end]);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `max` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   var date1 = new Date(1989, 6, 10)\n *   var date2 = new Date(1987, 1, 11)\n *   var maxDate = max(date1, date2)\n *\n *   // v2.0.0 onward:\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   var maxDate = max(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the latest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the latest?\n * var result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name min\n * @category Common Helpers\n * @summary Returns the earliest of the given dates.\n *\n * @description\n * Returns the earliest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `min` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   const date1 = new Date(1989, 6, 10)\n *   const date2 = new Date(1987, 1, 11)\n *   const minDate = min(date1, date2)\n *\n *   // v2.0.0 onward:\n *   const dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   const minDate = min(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} - the earliest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the earliest?\n * const result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */\n\nexport default function min(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestIndexTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date | Number} dateToCompare - the date to compare with\n * @param {Array<Date> | Array<number>} datesArray - the array to search\n * @returns {Number | undefined} an index of the date closest to the given date or undefined if no valid value is given\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * const dateToCompare = new Date(2015, 8, 6)\n * const datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * const result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\n\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  if (isNaN(Number(dateToCompare))) return NaN;\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < Number(minDistance)) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date | Number} dateToCompare - the date to compare with\n * @param {Array<Date> | Array<number>} datesArray - the array to search\n * @returns {Date | undefined} the date from the array closest to the given date or undefined if no valid value is given\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * const dateToCompare = new Date(2015, 8, 6)\n * const result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\nexport default function closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  if (isNaN(Number(dateToCompare))) return new Date(NaN);\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < Number(minDistance)) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareDesc\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { daysInWeek } from \"../constants/index.js\";\n/**\n * @name daysToWeeks\n * @category Conversion Helpers\n * @summary Convert days to weeks.\n *\n * @description\n * Convert a number of days to a full number of weeks.\n *\n * @param {number} days - number of days to be converted\n *\n * @returns {number} the number of days converted in weeks\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 14 days to weeks:\n * const result = daysToWeeks(14)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = daysToWeeks(13)\n * //=> 1\n */\n\nexport default function daysToWeeks(days) {\n  requiredArgs(1, arguments);\n  var weeks = days / daysInWeek;\n  return Math.floor(weeks);\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import addDays from \"../addDays/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport isSameDay from \"../isSameDay/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport isWeekend from \"../isWeekend/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * const result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n *\n * // How many business days are between\n * // 1 November 2021 and 30 November 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 10, 30)\n * )\n * //=> 21\n *\n * // How many business days are between\n * // 1 November 2021 and 1 December 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 11, 1)\n * )\n * //=> 22\n *\n * // How many business days are between\n * // 1 November 2021 and 1 November 2021 ?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 10, 1)\n * )\n * //=> 0\n */\n\nexport default function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  if (!isValid(dateLeft) || !isValid(dateRight)) return NaN;\n  var calendarDifference = differenceInCalendarDays(dateLeft, dateRight);\n  var sign = calendarDifference < 0 ? -1 : 1;\n  var weeks = toInteger(calendarDifference / 7);\n  var result = weeks * 5;\n  dateRight = addDays(dateRight, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!isSameDay(dateLeft, dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += isWeekend(dateRight) ? 0 : sign;\n    dateRight = addDays(dateRight, sign);\n  }\n\n  return result === 0 ? 0 : result;\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n * \n * @example\n * // Are 4 September and 4 October in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n * \n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of calendar ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of calendar ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInCalendarISOYears` to `differenceInCalendarISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?\n * const result = differenceInCalendarISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return getISOWeekYear(dirtyDateLeft) - getISOWeekYear(dirtyDateRight);\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft);\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight);\n  var timestampLeft = startOfISOWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  var timestampRight = startOfISOWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import getQuarter from \"../getQuarter/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarQuarters\n * @category Quarter Helpers\n * @summary Get the number of calendar quarters between the given dates.\n *\n * @description\n * Get the number of calendar quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar quarters are between 31 December 2013 and 2 July 2014?\n * var result = differenceInCalendarQuarters(\n *   new Date(2014, 6, 2),\n *   new Date(2013, 11, 31)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarQuarters(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var quarterDiff = getQuarter(dateLeft) - getQuarter(dateRight);\n  return yearDiff * 4 + quarterDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which quarter is 2 July 2014?\n * const result = getQuarter(new Date(2014, 6, 2))\n * //=> 3\n */\n\nexport default function getQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = Math.floor(date.getMonth() / 3) + 1;\n  return quarter;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function (value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarISOWeekYears from \"../differenceInCalendarISOWeekYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport subISOWeekYears from \"../subISOWeekYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of full ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of full ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInISOYears` to `differenceInISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?\n * var result = differenceInISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 1\n */\n\nexport default function differenceInISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarISOWeekYears(dateLeft, dateRight));\n  dateLeft = subISOWeekYears(dateLeft, sign * difference); // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1\n  // if last calendar ISO year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastISOWeekYearNotFull = Number(compareAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastISOWeekYearNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addISOWeekYears from \"../addISOWeekYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Subtract the specified number of ISO week-numbering years from the given date.\n *\n * @description\n * Subtract the specified number of ISO week-numbering years from the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `subISOYears` to `subISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 ISO week-numbering years from 1 September 2014:\n * const result = subISOWeekYears(new Date(2014, 8, 1), 5)\n * //=> Mon Aug 31 2009 00:00:00\n */\n\nexport default function subISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addISOWeekYears(dirtyDate, -amount);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import differenceInMonths from \"../differenceInMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\n\nexport default function differenceInQuarters(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMonths(dateLeft, dateRight) / 3;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInDays from \"../differenceInDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\n\nexport default function differenceInWeeks(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dateLeft, dateRight) / 7;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * const result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import addHours from \"../addHours/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * var result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nexport default function eachHourOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return dates;\n}","import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The starts of minutes from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument requie value should be more than 1.\n * @returns {Date[]} the array withred\n * @throws {RangeError} `options.step` must be a number equal or greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nexport default function eachMinuteOfInterval(interval, options) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal or greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\n\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * var result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\nexport default function eachMonthOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime();\n  var dates = []; // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n\n  return dates;\n}","import addQuarters from \"../addQuarters/index.js\";\nimport startOfQuarter from \"../startOfQuarter/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * var result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\nexport default function eachQuarterOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateQuarter = startOfQuarter(startDate);\n  var endDateQuarter = startOfQuarter(endDate);\n  endTime = endDateQuarter.getTime();\n  var quarters = [];\n  var currentQuarter = startDateQuarter;\n\n  while (currentQuarter.getTime() <= endTime) {\n    quarters.push(toDate(currentQuarter));\n    currentQuarter = addQuarters(currentQuarter, 1);\n  }\n\n  return quarters;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import addWeeks from \"../addWeeks/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * var result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\nexport default function eachWeekOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateWeek = startOfWeek(startDate, options);\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  endTime = endDateWeek.getTime();\n  var weeks = [];\n  var currentWeek = startDateWeek;\n\n  while (currentWeek.getTime() <= endTime) {\n    currentWeek.setHours(0);\n    weeks.push(toDate(currentWeek));\n    currentWeek = addWeeks(currentWeek, 1);\n    currentWeek.setHours(15);\n  }\n\n  return weeks;\n}","import eachDayOfInterval from \"../eachDayOfInterval/index.js\";\nimport isSunday from \"../isSunday/index.js\";\nimport isWeekend from \"../isWeekend/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekendOfInterval\n * @category Interval Helpers\n * @summary List all the Saturdays and Sundays in the given date interval.\n *\n * @description\n * Get all the Saturdays and Sundays in the given date interval.\n *\n * @param {Interval} interval - the given interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Lists all Saturdays and Sundays in the given date interval\n * const result = eachWeekendOfInterval({\n *   start: new Date(2018, 8, 17),\n *   end: new Date(2018, 8, 30)\n * })\n * //=> [\n * //   Sat Sep 22 2018 00:00:00,\n * //   Sun Sep 23 2018 00:00:00,\n * //   Sat Sep 29 2018 00:00:00,\n * //   Sun Sep 30 2018 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfInterval(interval) {\n  requiredArgs(1, arguments);\n  var dateInterval = eachDayOfInterval(interval);\n  var weekends = [];\n  var index = 0;\n\n  while (index < dateInterval.length) {\n    var date = dateInterval[index++];\n\n    if (isWeekend(date)) {\n      weekends.push(date);\n      if (isSunday(date)) index = index + 5;\n    }\n  }\n\n  return weekends;\n}","import eachWeekendOfInterval from \"../eachWeekendOfInterval/index.js\";\nimport startOfMonth from \"../startOfMonth/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekendOfMonth\n * @category Month Helpers\n * @summary List all the Saturdays and Sundays in the given month.\n *\n * @description\n * Get all the Saturdays and Sundays in the given month.\n *\n * @param {Date|Number} date - the given month\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the given month\n * const result = eachWeekendOfMonth(new Date(2022, 1, 1))\n * //=> [\n * //   Sat Feb 05 2022 00:00:00,\n * //   Sun Feb 06 2022 00:00:00,\n * //   Sat Feb 12 2022 00:00:00,\n * //   Sun Feb 13 2022 00:00:00,\n * //   Sat Feb 19 2022 00:00:00,\n * //   Sun Feb 20 2022 00:00:00,\n * //   Sat Feb 26 2022 00:00:00,\n * //   Sun Feb 27 2022 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMonth(dirtyDate);\n  if (isNaN(startDate.getTime())) throw new RangeError('The passed date is invalid');\n  var endDate = endOfMonth(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import eachWeekendOfInterval from \"../eachWeekendOfInterval/index.js\";\nimport startOfYear from \"../startOfYear/index.js\";\nimport endOfYear from \"../endOfYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachWeekendOfYear\n * @category Year Helpers\n * @summary List all the Saturdays and Sundays in the year.\n *\n * @description\n * Get all the Saturdays and Sundays in the year.\n *\n * @param {Date|Number} date - the given year\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the year\n * var result = eachWeekendOfYear(new Date(2020, 1, 1))\n * //=> [\n * //   Sat Jan 03 2020 00:00:00,\n * //   Sun Jan 04 2020 00:00:00,\n * //   ...\n * //   Sun Dec 27 2020 00:00:00\n * // ]\n * ]\n */\n\nexport default function eachWeekendOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfYear(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfYear(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachYearOfInterval\n * @category Interval Helpers\n * @summary Return the array of yearly timestamps within the specified time interval.\n *\n * @description\n * Return the array of yearly timestamps within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each year between 6 February 2014 and 10 August 2017:\n * const result = eachYearOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2017, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Thu Jan 01 2015 00:00:00,\n * //   Fri Jan 01 2016 00:00:00,\n * //   Sun Jan 01 2017 00:00:00\n * // ]\n */\n\nexport default function eachYearOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + 1);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDecade\n * @category Decade Helpers\n * @summary Return the end of a decade for the given date.\n *\n * @description\n * Return the end of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a decade\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The end of a decade for 12 May 1984 00:00:00:\n * const result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))\n * //=> Dec 31 1989 23:59:59.999\n */\n\nexport default function endOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 11, 31);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\n\nexport default function endOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(59, 59, 999);\n  return date;\n}","import endOfWeek from \"../endOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the end of an ISO week for the given date.\n *\n * @description\n * Return the end of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week for 2 September 2014 11:55:00:\n * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return endOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the end of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the end of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `endOfISOYear` to `endOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week-numbering year for 2 July 2005:\n * const result = endOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 23:59:59.999\n */\n\nexport default function endOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  date.setMilliseconds(date.getMilliseconds() - 1);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\n\nexport default function endOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\n\nexport default function endOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(999);\n  return date;\n}","import endOfDay from \"../endOfDay/index.js\";\n/**\n * @name endOfToday\n * @category Day Helpers\n * @summary Return the end of today.\n * @pure false\n *\n * @description\n * Return the end of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfToday()\n * //=> Mon Oct 6 2014 23:59:59.999\n */\n\nexport default function endOfToday() {\n  return endOfDay(Date.now());\n}","/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\nexport default function endOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","/**\n * @name endOfYesterday\n * @category Day Helpers\n * @summary Return the end of yesterday.\n * @pure false\n *\n * @description\n * Return the end of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfYesterday()\n * //=> Sun Oct 5 2014 23:59:59.999\n */\nexport default function endOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && options.unit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","import distanceInWords from \"../formatDistance/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *   ```\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistanceToNow(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), dirtyOptions);\n}","import formatDistanceStrict from \"../formatDistanceStrict/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * var result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceToNowStrict(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return formatDistanceStrict(dirtyDate, Date.now(), dirtyOptions);\n}","import defaultLocale from \"../locale/en-US/index.js\";\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\nexport default function formatDuration(duration) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var format = (options === null || options === void 0 ? void 0 : options.format) || defaultFormat;\n  var locale = (options === null || options === void 0 ? void 0 : options.locale) || defaultLocale;\n  var zero = (options === null || options === void 0 ? void 0 : options.zero) || false;\n  var delimiter = (options === null || options === void 0 ? void 0 : options.delimiter) || ' ';\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var addChunk = typeof duration[unit] === 'number' && (zero || duration[unit]);\n    return addChunk && locale.formatDistance ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;\n  }, []).join(delimiter);\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(date, options) {\n  requiredArgs(1, arguments);\n  var originalDate = toDate(date);\n\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var format = !(options !== null && options !== void 0 && options.format) ? 'extended' : String(options.format);\n  var representation = !(options !== null && options !== void 0 && options.representation) ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nexport default function formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISODuration\n * @category Common Helpers\n * @summary Format a duration object according as ISO 8601 duration string\n *\n * @description\n * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm)\n *\n * @param {Duration} duration - the duration to format\n *\n * @returns {String} The ISO 8601 duration string\n * @throws {TypeError} Requires 1 argument\n * @throws {Error} Argument must be an object\n *\n * @example\n * // Format the given duration as ISO 8601 string\n * const result = formatISODuration({\n *   years: 39,\n *   months: 2,\n *   days: 20,\n *   hours: 7,\n *   minutes: 5,\n *   seconds: 0\n * })\n * //=> 'P39Y2M20DT0H0M0S'\n */\n\nexport default function formatISODuration(duration) {\n  requiredArgs(1, arguments);\n  if (typeof duration !== 'object') throw new Error('Duration must be an object');\n  var _duration$years = duration.years,\n      years = _duration$years === void 0 ? 0 : _duration$years,\n      _duration$months = duration.months,\n      months = _duration$months === void 0 ? 0 : _duration$months,\n      _duration$days = duration.days,\n      days = _duration$days === void 0 ? 0 : _duration$days,\n      _duration$hours = duration.hours,\n      hours = _duration$hours === void 0 ? 0 : _duration$hours,\n      _duration$minutes = duration.minutes,\n      minutes = _duration$minutes === void 0 ? 0 : _duration$minutes,\n      _duration$seconds = duration.seconds,\n      seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;\n  return \"P\".concat(years, \"Y\").concat(months, \"M\").concat(days, \"DT\").concat(hours, \"H\").concat(minutes, \"M\").concat(seconds, \"S\");\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var _ref = dirtyOptions || {},\n      _ref$fractionDigits = _ref.fractionDigits,\n      fractionDigits = _ref$fractionDigits === void 0 ? 0 : _ref$fractionDigits; // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = addLeadingZeros(originalDate.getDate(), 2);\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nexport default function formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = addLeadingZeros(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = addLeadingZeros(originalDate.getUTCHours(), 2);\n  var minute = addLeadingZeros(originalDate.getUTCMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}","import differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport format from \"../format/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to format\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {String} the date in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(addDays(new Date(), -6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport default function formatRelative(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var baseDate = toDate(dirtyBaseDate);\n\n  var _ref = dirtyOptions || {},\n      _ref$locale = _ref.locale,\n      locale = _ref$locale === void 0 ? defaultLocale : _ref$locale,\n      _ref$weekStartsOn = _ref.weekStartsOn,\n      weekStartsOn = _ref$weekStartsOn === void 0 ? 0 : _ref$weekStartsOn;\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  if (!locale.formatRelative) {\n    throw new RangeError('locale must contain formatRelative property');\n  }\n\n  var diff = differenceInCalendarDays(date, baseDate);\n\n  if (isNaN(diff)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var token;\n\n  if (diff < -6) {\n    token = 'other';\n  } else if (diff < -1) {\n    token = 'lastWeek';\n  } else if (diff < 0) {\n    token = 'yesterday';\n  } else if (diff < 1) {\n    token = 'today';\n  } else if (diff < 2) {\n    token = 'tomorrow';\n  } else if (diff < 7) {\n    token = 'nextWeek';\n  } else {\n    token = 'other';\n  }\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var utcBaseDate = subMilliseconds(baseDate, getTimezoneOffsetInMilliseconds(baseDate));\n  var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, {\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n  return format(date, formatStr, {\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * const result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\n\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import toDate from \"../toDate/index.js\";\nimport startOfYear from \"../startOfYear/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\n\nexport default function getDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = differenceInCalendarDays(date, startOfYear(date));\n  var dayOfYear = diff + 1;\n  return dayOfYear;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * const result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from \"../toDate/index.js\";\nimport isLeapYear from \"../isLeapYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDaysInYear\n * @category Year Helpers\n * @summary Get the number of days in a year of the given date.\n *\n * @description\n * Get the number of days in a year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in 2012?\n * const result = getDaysInYear(new Date(2012, 0, 1))\n * //=> 366\n */\n\nexport default function getDaysInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n\n  if (String(new Date(date)) === 'Invalid Date') {\n    return NaN;\n  }\n\n  return isLeapYear(date) ? 366 : 365;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLeapYear\n * @category Year Helpers\n * @summary Is the given date in the leap year?\n *\n * @description\n * Is the given date in the leap year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the leap year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2012 in the leap year?\n * var result = isLeapYear(new Date(2012, 8, 1))\n * //=> true\n */\n\nexport default function isLeapYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDecade\n * @category Decade Helpers\n * @summary Get the decade of the given date.\n *\n * @description\n * Get the decade of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year of decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which decade belongs 27 November 1942?\n * const result = getDecade(new Date(1942, 10, 27))\n * //=> 1940\n */\n\nexport default function getDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  return decade;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\n\nexport default function getISODay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n\n  if (day === 0) {\n    day = 7;\n  }\n\n  return day;\n}","import toDate from \"../toDate/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\nexport default function getISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport addWeeks from \"../addWeeks/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of ISO weeks in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\n\nexport default function getISOWeeksInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var thisYear = startOfISOWeekYear(dirtyDate);\n  var nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\n  var diff = nextYear.valueOf() - thisYear.valueOf(); // Round the number of weeks to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMilliseconds\n * @category Millisecond Helpers\n * @summary Get the milliseconds of the given date.\n *\n * @description\n * Get the milliseconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the milliseconds of 29 February 2012 11:45:05.123:\n * const result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 123\n */\n\nexport default function getMilliseconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = date.getMilliseconds();\n  return milliseconds;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMinutes\n * @category Minute Helpers\n * @summary Get the minutes of the given date.\n *\n * @description\n * Get the minutes of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the minutes of 29 February 2012 11:45:05:\n * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 45\n */\n\nexport default function getMinutes(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = date.getMinutes();\n  return minutes;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * const result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getOverlappingDaysInRanges` to `getOverlappingDaysInIntervals`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   getOverlappingDaysInRanges(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   getOverlappingDaysInIntervals(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport default function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */\n\nexport default function getSeconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds();\n  return seconds;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport startOfWeekYear from \"../startOfWeekYear/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport default function getWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getWeekYear from \"../getWeekYear/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the start of a week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport default function startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the local week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport default function getWeekYear(dirtyDate, options) {\n  var _options$locale, _options$locale$optio;\n\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var localeFirstWeekContainsDate = options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = (options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getDate from \"../getDate/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport startOfMonth from \"../startOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the week of month\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6 inclusively\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\n\nexport default function getWeekOfMonth(date, options) {\n  var _options$locale, _options$locale$optio;\n\n  requiredArgs(1, arguments);\n  var defaultWeekStartsOn = (options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) || 0;\n  var weekStartsOn = (options === null || options === void 0 ? void 0 : options.weekStartsOn) == null ? toInteger(defaultWeekStartsOn) : toInteger(options.weekStartsOn);\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var currentDayOfMonth = getDate(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n  var startWeekDay = getDay(startOfMonth(date));\n  var lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n  var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}","import differenceInCalendarWeeks from \"../differenceInCalendarWeeks/index.js\";\nimport lastDayOfMonth from \"../lastDayOfMonth/index.js\";\nimport startOfMonth from \"../startOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name getWeeksInMonth\n * @category Week Helpers\n * @summary Get the number of calendar weeks a month spans.\n *\n * @description\n * Get the number of calendar weeks the month in the given date spans.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks does February 2015 span?\n * const result = getWeeksInMonth(new Date(2015, 1, 8))\n * //=> 4\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks does July 2017 span?\n * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })\n * //=> 6\n */\nexport default function getWeeksInMonth(date, options) {\n  requiredArgs(1, arguments);\n  return differenceInCalendarWeeks(lastDayOfMonth(date), startOfMonth(date), options) + 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfMonth\n * @category Month Helpers\n * @summary Return the last day of a month for the given date.\n *\n * @description\n * Return the last day of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a month for 2 September 2014 11:55:00:\n * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInHour } from \"../constants/index.js\";\n/**\n * @name hoursToMilliseconds\n * @category  Conversion Helpers\n * @summary Convert hours to milliseconds.\n *\n * @description\n * Convert a number of hours to a full number of milliseconds.\n *\n * @param {number} hours - number of hours to be converted\n *\n * @returns {number} the number of hours converted to milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 hours to milliseconds:\n * const result = hoursToMilliseconds(2)\n * //=> 7200000\n */\n\nexport default function hoursToMilliseconds(hours) {\n  requiredArgs(1, arguments);\n  return Math.floor(hours * millisecondsInHour);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { minutesInHour } from \"../constants/index.js\";\n/**\n * @name hoursToMinutes\n * @category Conversion Helpers\n * @summary Convert hours to minutes.\n *\n * @description\n * Convert a number of hours to a full number of minutes.\n *\n * @param {number} hours - number of hours to be converted\n *\n * @returns {number} the number of hours converted in minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 hours to minutes:\n * const result = hoursToMinutes(2)\n * //=> 120\n */\n\nexport default function hoursToMinutes(hours) {\n  requiredArgs(1, arguments);\n  return Math.floor(hours * minutesInHour);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInHour } from \"../constants/index.js\";\n/**\n * @name hoursToSeconds\n * @category Conversion Helpers\n * @summary Convert hours to seconds.\n *\n * @description\n * Convert a number of hours to a full number of seconds.\n *\n * @param {number} hours - number of hours to be converted\n *\n * @returns {number} the number of hours converted in seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 hours to seconds:\n * const result = hoursToSeconds(2)\n * //=> 7200\n */\n\nexport default function hoursToSeconds(hours) {\n  requiredArgs(1, arguments);\n  return Math.floor(hours * secondsInHour);\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport sub from \"../sub/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(_ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  requiredArgs(1, arguments);\n  var dateLeft = toDate(start);\n  var dateRight = toDate(end);\n\n  if (!isValid(dateLeft)) {\n    throw new RangeError('Start Date is invalid');\n  }\n\n  if (!isValid(dateRight)) {\n    throw new RangeError('End Date is invalid');\n  }\n\n  var duration = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  };\n  var sign = compareAsc(dateLeft, dateRight);\n  duration.years = Math.abs(differenceInYears(dateLeft, dateRight));\n  var remainingMonths = sub(dateLeft, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(remainingMonths, dateRight));\n  var remainingDays = sub(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(remainingDays, dateRight));\n  var remainingHours = sub(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(remainingHours, dateRight));\n  var remainingMinutes = sub(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(remainingMinutes, dateRight));\n  var remainingSeconds = sub(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(remainingSeconds, dateRight));\n  return duration;\n}","import subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(date, months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name intlFormat\n * @category Common Helpers\n * @summary  Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\n *\n * @description\n * Return the formatted date string in the given format.\n * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\n * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\n *\n * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\n *\n * @param {Date|Number} argument - the original date.\n * @param {Object} [formatOptions] - an object with options.\n * @param {'lookup'|'best fit'} [formatOptions.localeMatcher='best fit'] - locale selection algorithm.\n * @param {'narrow'|'short'|'long'} [formatOptions.weekday] - representation the days of the week.\n * @param {'narrow'|'short'|'long'} [formatOptions.era] - representation of eras.\n * @param {'numeric'|'2-digit'} [formatOptions.year] - representation of years.\n * @param {'numeric'|'2-digit'|'narrow'|'short'|'long'} [formatOptions.month='numeric'] - representation of month.\n * @param {'numeric'|'2-digit'} [formatOptions.day='numeric'] - representation of day.\n * @param {'numeric'|'2-digit'} [formatOptions.hour='numeric'] - representation of hours.\n * @param {'numeric'|'2-digit'} [formatOptions.minute] - representation of minutes.\n * @param {'numeric'|'2-digit'} [formatOptions.second] - representation of seconds.\n * @param {'short'|'long'} [formatOptions.timeZoneName] - representation of names of time zones.\n * @param {'basic'|'best fit'} [formatOptions.formatMatcher='best fit'] - format selection algorithm.\n * @param {Boolean} [formatOptions.hour12] - determines whether to use 12-hour time format.\n * @param {String} [formatOptions.timeZone] - the time zone to use.\n * @param {Object} [localeOptions] - an object with locale.\n * @param {String|String[]} [localeOptions.locale] - the locale code\n * @returns {String} the formatted date string.\n * @throws {TypeError} 1 argument required.\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 10 October 2019 in German.\n * // Convert the date with format's options and locale's options.\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\n *      weekday: 'long',\n *      year: 'numeric',\n *      month: 'long',\n *      day: 'numeric',\n *    }, {\n *      locale: 'de-DE',\n *  })\n * //=> Freitag, 4. Oktober 2019\n *\n * @example\n * // Represent 10 October 2019.\n * // Convert the date with format's options.\n * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\n *      year: 'numeric',\n *      month: 'numeric',\n *      day: 'numeric',\n *      hour: 'numeric',\n *  })\n * //=> 10/4/2019, 12 PM\n *\n * @example\n * // Represent 10 October 2019 in Korean.\n * // Convert the date with locale's options.\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\n *      locale: 'ko-KR',\n *  })\n * //=> 2019. 10. 4.\n *\n * @example\n * // Represent 10 October 2019 in middle-endian format:\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\n * //=> 10/4/2019\n */\nexport default function intlFormat(date, formatOrLocale, localeOptions) {\n  var _localeOptions;\n\n  requiredArgs(1, arguments);\n  var formatOptions;\n\n  if (isFormatOptions(formatOrLocale)) {\n    formatOptions = formatOrLocale;\n  } else {\n    localeOptions = formatOrLocale;\n  }\n\n  return new Intl.DateTimeFormat((_localeOptions = localeOptions) === null || _localeOptions === void 0 ? void 0 : _localeOptions.locale, formatOptions).format(date);\n}\n\nfunction isFormatOptions(opts) {\n  return opts !== undefined && !('locale' in opts);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","/**\n * @name isExists\n * @category Common Helpers\n * @summary Is the given date exists?\n *\n * @description\n * Checks if the given arguments convert to an existing date.\n *\n * @param {Number} year of the date to check\n * @param {Number} month of the date to check\n * @param {Number} day of the date to check\n * @returns {Boolean} the date exists\n * @throws {TypeError} 3 arguments required\n *\n * @example\n * // For the valid date:\n * var result = isExists(2018, 0, 31)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isExists(2018, 1, 31)\n * //=> false\n */\nexport default function isExists(year, month, day) {\n  if (arguments.length < 3) {\n    throw new TypeError('3 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = new Date(year, month, day);\n  return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFirstDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * var result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\n\nexport default function isFirstDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDate() === 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFriday\n * @category Weekday Helpers\n * @summary Is the given date Friday?\n *\n * @description\n * Is the given date Friday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 26 September 2014 Friday?\n * var result = isFriday(new Date(2014, 8, 26))\n * //=> true\n */\n\nexport default function isFriday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 5;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the future\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * var result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\n\nexport default function isFuture(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() > Date.now();\n}","import parse from \"../parse/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isMatch\n * @category Common Helpers\n * @summary validates the date string against given formats\n *\n * @description\n * Return the true if given date is string correct against the given format else\n * will return false.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * isMatch('23 AM', 'HH a')\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `isMatch` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `isMatch` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `isMatch` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `isMatch('50', 'yy') //=> true`\n *\n *    `isMatch('75', 'yy') //=> true`\n *\n *    while `uu` will use the year as is:\n *\n *    `isMatch('50', 'uu') //=> true`\n *\n *    `isMatch('75', 'uu') //=> true`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be checked in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are matched (e.g. when matching string 'January 1st' without a year),\n * the values will be taken from today's using `new Date()` date which works as a context of parsing.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n *\n *\n * @param {String} dateString - the date string to verify\n * @param {String} formatString - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Boolean}\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Match 11 February 2014 from middle-endian format:\n * var result = isMatch('02/11/2014', 'MM/dd/yyyy')\n * //=> true\n *\n * @example\n * // Match 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = isMatch('28-a de februaro', \"do 'de' MMMM\", {\n *   locale: eo\n * })\n * //=> true\n */\nexport default function isMatch(dateString, formatString, options) {\n  requiredArgs(2, arguments);\n  return isValid(parse(dateString, formatString, new Date(), options));\n}","import defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport parsers from \"./_lib/parsers/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }; // If timezone isn't specified, it will be set to the system timezone\n\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\";\nimport setUTCISODay from \"../../../_lib/setUTCISODay/index.js\";\nimport setUTCISOWeek from \"../../../_lib/setUTCISOWeek/index.js\";\nimport setUTCWeek from \"../../../_lib/setUTCWeek/index.js\";\nimport startOfUTCISOWeek from \"../../../_lib/startOfUTCISOWeek/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCISOWeek from \"../getUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCWeek from \"../getUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isMonday\n * @category Weekday Helpers\n * @summary Is the given date Monday?\n *\n * @description\n * Is the given date Monday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 22 September 2014 Monday?\n * var result = isMonday(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isMonday(date) {\n  requiredArgs(1, arguments);\n  return toDate(date).getDay() === 1;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * var result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isPast(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() < Date.now();\n}","import startOfHour from \"../startOfHour/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameHour\n * @category Hour Helpers\n * @summary Are the given dates in the same hour (and same day)?\n *\n * @description\n * Are the given dates in the same hour (and same day)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same hour (and same day)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))\n * //=> true\n * \n * @example\n * // Are 4 September 2014 06:00:00 and 5 September 06:00:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 5, 6, 0))\n * //=> false\n */\n\nexport default function isSameHour(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfHour = startOfHour(dirtyDateLeft);\n  var dateRightStartOfHour = startOfHour(dirtyDateRight);\n  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import isSameWeek from \"../isSameWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameISOWeek\n * @category ISO Week Helpers\n * @summary Are the given dates in the same ISO week (and year)?\n *\n * @description\n * Are the given dates in the same ISO week (and year)?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 September 2014 and 7 September 2014 in the same ISO week?\n * var result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))\n * //=> true\n *\n * @example\n * // Are 1 September 2014 and 1 September 2015 in the same ISO week?\n * var result = isSameISOWeek(new Date(2014, 8, 1), new Date(2015, 8, 1))\n * //=> false\n */\n\nexport default function isSameISOWeek(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return isSameWeek(dirtyDateLeft, dirtyDateRight, {\n    weekStartsOn: 1\n  });\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week (and month and year)?\n *\n * @description\n * Are the given dates in the same week (and month and year)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the dates are in the same week (and month and year)\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n * \n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same week?\n * var result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\nexport default function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}","import startOfISOWeekYear from \"../startOfISOWeekYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Are the given dates in the same ISO week-numbering year?\n *\n * @description\n * Are the given dates in the same ISO week-numbering year?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isSameISOYear` to `isSameISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week-numbering year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\n * var result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\n * //=> true\n */\n\nexport default function isSameISOWeekYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfYear = startOfISOWeekYear(dirtyDateLeft);\n  var dateRightStartOfYear = startOfISOWeekYear(dirtyDateRight);\n  return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime();\n}","import startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMinute\n * @category Minute Helpers\n * @summary Are the given dates in the same minute (and hour and day)?\n *\n * @description\n * Are the given dates in the same minute (and hour and day)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same minute (and hour and day)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15 in the same minute?\n * var result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 4, 6, 30, 15)\n * )\n * //=> true\n * \n * @example\n * // Are 4 September 2014 06:30:00 and 5 September 2014 06:30:00 in the same minute?\n * var result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 5, 6, 30)\n * )\n * //=> false\n */\n\nexport default function isSameMinute(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfMinute = startOfMinute(dirtyDateLeft);\n  var dateRightStartOfMinute = startOfMinute(dirtyDateRight);\n  return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import startOfQuarter from \"../startOfQuarter/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameQuarter\n * @category Quarter Helpers\n * @summary Are the given dates in the same quarter (and year)?\n *\n * @description\n * Are the given dates in the same quarter (and year)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same quarter (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\n * var result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\n * //=> true\n * \n * @example\n * // Are 1 January 2014 and 1 January 2015 in the same quarter?\n * var result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))\n * //=> false\n */\n\nexport default function isSameQuarter(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);\n  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);\n  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();\n}","import startOfSecond from \"../startOfSecond/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameSecond\n * @category Second Helpers\n * @summary Are the given dates in the same second (and hour and day)?\n *\n * @description\n * Are the given dates in the same second (and hour and day)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same second (and hour and day)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500 in the same second?\n * var result = isSameSecond(\n *   new Date(2014, 8, 4, 6, 30, 15),\n *   new Date(2014, 8, 4, 6, 30, 15, 500)\n * )\n * //=> true\n * \n * @example\n * // Are 4 September 2014 06:00:15.000 and 4 September 2014 06:01.15.000 in the same second?\n * var result = isSameSecond(\n *   new Date(2014, 8, 4, 6, 0, 15),\n *   new Date(2014, 8, 4, 6, 1, 15)\n * )\n * //=> false\n * \n * @example\n * // Are 4 September 2014 06:00:15.000 and 5 September 2014 06:00.15.000 in the same second?\n * var result = isSameSecond(\n *   new Date(2014, 8, 4, 6, 0, 15),\n *   new Date(2014, 8, 5, 6, 0, 15)\n * )\n * //=> false\n */\n\nexport default function isSameSecond(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft);\n  var dateRightStartOfSecond = startOfSecond(dirtyDateRight);\n  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\n\nexport default function startOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear();\n}","import isSameHour from \"../isSameHour/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisHour\n * @category Hour Helpers\n * @summary Is the given date in the same hour as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same hour as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:00:00 in this hour?\n * var result = isThisHour(new Date(2014, 8, 25, 18))\n * //=> true\n */\n\nexport default function isThisHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameHour(Date.now(), dirtyDate);\n}","import isSameISOWeek from \"../isSameISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisISOWeek\n * @category ISO Week Helpers\n * @summary Is the given date in the same ISO week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same ISO week as the current date?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 22 September 2014 in this ISO week?\n * var result = isThisISOWeek(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isThisISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameISOWeek(dirtyDate, Date.now());\n}","import isSameMinute from \"../isSameMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisMinute\n * @category Minute Helpers\n * @summary Is the given date in the same minute as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same minute as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:00 in this minute?\n * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))\n * //=> true\n */\n\nexport default function isThisMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMinute(Date.now(), dirtyDate);\n}","import isSameMonth from \"../isSameMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisMonth\n * @category Month Helpers\n * @summary Is the given date in the same month as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same month as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 15 September 2014 in this month?\n * var result = isThisMonth(new Date(2014, 8, 15))\n * //=> true\n */\n\nexport default function isThisMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMonth(Date.now(), dirtyDate);\n}","import isSameQuarter from \"../isSameQuarter/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisQuarter\n * @category Quarter Helpers\n * @summary Is the given date in the same quarter as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same quarter as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this quarter?\n * var result = isThisQuarter(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameQuarter(Date.now(), dirtyDate);\n}","import isSameSecond from \"../isSameSecond/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisSecond\n * @category Second Helpers\n * @summary Is the given date in the same second as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same second as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:15.000 in this second?\n * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))\n * //=> true\n */\n\nexport default function isThisSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameSecond(Date.now(), dirtyDate);\n}","import isSameWeek from \"../isSameWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @param {Object} [options] - the object with options\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the date is in this week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\nexport default function isThisWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return isSameWeek(dirtyDate, Date.now(), options);\n}","import isSameYear from \"../isSameYear/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThisYear\n * @category Year Helpers\n * @summary Is the given date in the same year as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same year as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this year?\n * var result = isThisYear(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameYear(dirtyDate, Date.now());\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThursday\n * @category Weekday Helpers\n * @summary Is the given date Thursday?\n *\n * @description\n * Is the given date Thursday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 25 September 2014 Thursday?\n * var result = isThursday(new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isThursday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 4;\n}","import isSameDay from \"../isSameDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","import addDays from \"../addDays/index.js\";\nimport isSameDay from \"../isSameDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is tomorrow\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\n\nexport default function isTomorrow(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, addDays(Date.now(), 1));\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isTuesday\n * @category Weekday Helpers\n * @summary Is the given date Tuesday?\n *\n * @description\n * Is the given date Tuesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 23 September 2014 Tuesday?\n * var result = isTuesday(new Date(2014, 8, 23))\n * //=> true\n */\n\nexport default function isTuesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 2;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWednesday\n * @category Weekday Helpers\n * @summary Is the given date Wednesday?\n *\n * @description\n * Is the given date Wednesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 24 September 2014 Wednesday?\n * const result = isWednesday(new Date(2014, 8, 24))\n * //=> true\n */\n\nexport default function isWednesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 3;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nexport default function isWithinInterval(dirtyDate, interval) {\n  requiredArgs(2, arguments);\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","import isSameDay from \"../isSameDay/index.js\";\nimport subDays from \"../subDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isYesterday\n * @category Day Helpers\n * @summary Is the given date yesterday?\n * @pure false\n *\n * @description\n * Is the given date yesterday?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is yesterday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?\n * var result = isYesterday(new Date(2014, 9, 5, 14, 0))\n * //=> true\n */\n\nexport default function isYesterday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, subDays(Date.now(), 1));\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfDecade\n * @category Decade Helpers\n * @summary Return the last day of a decade for the given date.\n *\n * @description\n * Return the last day of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a decade for 21 December 2012 21:12:00:\n * var result = lastDayOfDecade(new Date(2012, 11, 21, 21, 12, 00))\n * //=> Wed Dec 31 2019 00:00:00\n */\n\nexport default function lastDayOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import lastDayOfWeek from \"../lastDayOfWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the last day of an ISO week for the given date.\n *\n * @description\n * Return the last day of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week for 2 September 2014 11:55:00:\n * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return lastDayOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the last day of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport default function lastDayOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import getISOWeekYear from \"../getISOWeekYear/index.js\";\nimport startOfISOWeek from \"../startOfISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the last day of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the last day of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `lastDayOfISOYear` to `lastDayOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week-numbering year for 2 July 2005:\n * var result = lastDayOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 00:00:00\n */\n\nexport default function lastDayOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year + 1, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  date.setDate(date.getDate() - 1);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfQuarter\n * @category Quarter Helpers\n * @summary Return the last day of a year quarter for the given date.\n *\n * @description\n * Return the last day of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the last day of a quarter\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The last day of a quarter for 2 September 2014 11:55:00:\n * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfYear\n * @category Year Helpers\n * @summary Return the last day of a year for the given date.\n *\n * @description\n * Return the last day of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a year for 2 September 2014 11:55:00:\n * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 00:00:00\n */\n\nexport default function lastDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/lightFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 001, ..., 999                |\n * |                                 | SSSS    | ...                               |\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\n\nexport default function lightFormat(dirtyDate, formatStr) {\n  requiredArgs(2, arguments);\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var tokens = formatStr.match(formattingTokensRegExp); // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n\n  if (!tokens) return '';\n  var result = tokens.map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      return formatter(utcDate, substring);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  var matches = input.match(escapedStringRegExp);\n\n  if (!matches) {\n    return input;\n  }\n\n  return matches[1].replace(doubleQuoteRegExp, \"'\");\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n// Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n// 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\nvar daysInYear = 365.2425;\n/**\n * @name milliseconds\n * @category Millisecond Helpers\n * @summary\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * @description\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * One month is a year divided by 12.\n *\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // 1 year in milliseconds\n * milliseconds({ years: 1 })\n * //=> 31556952000\n *\n * // 3 months in milliseconds\n * milliseconds({ months: 3 })\n * //=> 7889238000\n */\n\nexport default function milliseconds(_ref) {\n  var years = _ref.years,\n      months = _ref.months,\n      weeks = _ref.weeks,\n      days = _ref.days,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds;\n  requiredArgs(1, arguments);\n  var totalDays = 0;\n  if (years) totalDays += years * daysInYear;\n  if (months) totalDays += months * (daysInYear / 12);\n  if (weeks) totalDays += weeks * 7;\n  if (days) totalDays += days;\n  var totalSeconds = totalDays * 24 * 60 * 60;\n  if (hours) totalSeconds += hours * 60 * 60;\n  if (minutes) totalSeconds += minutes * 60;\n  if (seconds) totalSeconds += seconds;\n  return Math.round(totalSeconds * 1000);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInHour } from \"../constants/index.js\";\n/**\n * @name millisecondsToHours\n * @category Conversion Helpers\n * @summary Convert milliseconds to hours.\n *\n * @description\n * Convert a number of milliseconds to a full number of hours.\n *\n * @param {number} milliseconds - number of milliseconds to be converted\n *\n * @returns {number} the number of milliseconds converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 7200000 milliseconds to hours:\n * const result = millisecondsToHours(7200000)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToHours(7199999)\n * //=> 1\n */\n\nexport default function millisecondsToHours(milliseconds) {\n  requiredArgs(1, arguments);\n  var hours = milliseconds / millisecondsInHour;\n  return Math.floor(hours);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInMinute } from \"../constants/index.js\";\n/**\n * @name millisecondsToMinutes\n * @category Conversion Helpers\n * @summary Convert milliseconds to minutes.\n *\n * @description\n * Convert a number of milliseconds to a full number of minutes.\n *\n * @param {number} milliseconds - number of milliseconds to be converted.\n *\n * @returns {number} the number of milliseconds converted in minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 60000 milliseconds to minutes:\n * const result = millisecondsToMinutes(60000)\n * //=> 1\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToMinutes(119999)\n * //=> 1\n */\n\nexport default function millisecondsToMinutes(milliseconds) {\n  requiredArgs(1, arguments);\n  var minutes = milliseconds / millisecondsInMinute;\n  return Math.floor(minutes);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInSecond } from \"../constants/index.js\";\n/**\n * @name millisecondsToSeconds\n * @category Conversion Helpers\n * @summary Convert milliseconds to seconds.\n *\n * @description\n * Convert a number of milliseconds to a full number of seconds.\n *\n * @param {number} milliseconds - number of milliseconds to be converted\n *\n * @returns {number} the number of milliseconds converted in seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 1000 miliseconds to seconds:\n * const result = millisecondsToSeconds(1000)\n * //=> 1\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToSeconds(1999)\n * //=> 1\n */\n\nexport default function millisecondsToSeconds(milliseconds) {\n  requiredArgs(1, arguments);\n  var seconds = milliseconds / millisecondsInSecond;\n  return Math.floor(seconds);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { minutesInHour } from \"../constants/index.js\";\n/**\n * @name minutesToHours\n * @category Conversion Helpers\n * @summary Convert minutes to hours.\n *\n * @description\n * Convert a number of minutes to a full number of hours.\n *\n * @param {number} minutes - number of minutes to be converted\n *\n * @returns {number} the number of minutes converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 140 minutes to hours:\n * const result = minutesToHours(120)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = minutesToHours(179)\n * //=> 2\n */\n\nexport default function minutesToHours(minutes) {\n  requiredArgs(1, arguments);\n  var hours = minutes / minutesInHour;\n  return Math.floor(hours);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInMinute } from \"../constants/index.js\";\n/**\n * @name minutesToMilliseconds\n * @category Conversion Helpers\n * @summary Convert minutes to milliseconds.\n *\n * @description\n * Convert a number of minutes to a full number of milliseconds.\n *\n * @param {number} minutes - number of minutes to be converted\n *\n * @returns {number} the number of minutes converted in milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 minutes to milliseconds\n * const result = minutesToMilliseconds(2)\n * //=> 120000\n */\n\nexport default function minutesToMilliseconds(minutes) {\n  requiredArgs(1, arguments);\n  return Math.floor(minutes * millisecondsInMinute);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInMinute } from \"../constants/index.js\";\n/**\n * @name minutesToSeconds\n * @category Conversion Helpers\n * @summary Convert minutes to seconds.\n *\n * @description\n * Convert a number of minutes to a full number of seconds.\n *\n * @param { number } minutes - number of minutes to be converted\n *\n * @returns {number} the number of minutes converted in seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 minutes to seconds\n * const result = minutesToSeconds(2)\n * //=> 120\n */\n\nexport default function minutesToSeconds(minutes) {\n  requiredArgs(1, arguments);\n  return Math.floor(minutes * secondsInMinute);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInQuarter } from \"../constants/index.js\";\n/**\n * @name monthsToQuarters\n * @category Conversion Helpers\n * @summary Convert number of months to quarters.\n *\n * @description\n * Convert a number of months to a full number of quarters.\n *\n * @param {number} months - number of months to be converted.\n *\n * @returns {number} the number of months converted in quarters\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 6 months to quarters:\n * const result = monthsToQuarters(6)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = monthsToQuarters(7)\n * //=> 2\n */\n\nexport default function monthsToQuarters(months) {\n  requiredArgs(1, arguments);\n  var quarters = months / monthsInQuarter;\n  return Math.floor(quarters);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInYear } from \"../constants/index.js\";\n/**\n * @name monthsToYears\n * @category Conversion Helpers\n * @summary Convert number of months to years.\n *\n * @description\n * Convert a number of months to a full number of years.\n *\n * @param {number} months - number of months to be converted\n *\n * @returns {number} the number of months converted in years\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 36 months to years:\n * const result = monthsToYears(36)\n * //=> 3\n *\n * // It uses floor rounding:\n * const result = monthsToYears(40)\n * //=> 3\n */\n\nexport default function monthsToYears(months) {\n  requiredArgs(1, arguments);\n  var years = months / monthsInYear;\n  return Math.floor(years);\n}","import addDays from \"../addDays/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {Day} day - day of the week\n * @returns {Date} - the date is the next day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport default function nextDay(date, day) {\n  requiredArgs(2, arguments);\n  var delta = day - getDay(date);\n  if (delta <= 0) delta += 7;\n  return addDays(date, delta);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextFriday\n * @category Weekday Helpers\n * @summary When is the next Friday?\n *\n * @description\n * When is the next Friday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Friday after Mar, 22, 2020?\n * const result = nextFriday(new Date(2020, 2, 22))\n * //=> Fri Mar 27 2020 00:00:00\n */\n\nexport default function nextFriday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 5);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextMonday\n * @category Weekday Helpers\n * @summary When is the next Monday?\n *\n * @description\n * When is the next Monday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Monday after Mar, 22, 2020?\n * const result = nextMonday(new Date(2020, 2, 22))\n * //=> Mon Mar 23 2020 00:00:00\n */\n\nexport default function nextMonday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 1);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextSaturday\n * @category Weekday Helpers\n * @summary When is the next Saturday?\n *\n * @description\n * When is the next Saturday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Saturday after Mar, 22, 2020?\n * const result = nextSaturday(new Date(2020, 2, 22))\n * //=> Sat Mar 28 2020 00:00:00\n */\n\nexport default function nextSaturday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 6);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextSunday\n * @category Weekday Helpers\n * @summary When is the next Sunday?\n *\n * @description\n * When is the next Sunday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Sunday after Mar, 22, 2020?\n * const result = nextSunday(new Date(2020, 2, 22))\n * //=> Sun Mar 29 2020 00:00:00\n */\n\nexport default function nextSunday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 0);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextThursday\n * @category Weekday Helpers\n * @summary When is the next Thursday?\n *\n * @description\n * When is the next Thursday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Thursday after Mar, 22, 2020?\n * const result = nextThursday(new Date(2020, 2, 22))\n * //=> Thur Mar 26 2020 00:00:00\n */\n\nexport default function nextThursday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 4);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextTuesday\n * @category Weekday Helpers\n * @summary When is the next Tuesday?\n *\n * @description\n * When is the next Tuesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Tuesday after Mar, 22, 2020?\n * const result = nextTuesday(new Date(2020, 2, 22))\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport default function nextTuesday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 2);\n}","import nextDay from \"../nextDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name nextWednesday\n * @category Weekday Helpers\n * @summary When is the next Wednesday?\n *\n * @description\n * When is the next Wednesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the next Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the next Wednesday after Mar, 22, 2020?\n * const result = nextWednesday(new Date(2020, 2, 22))\n * //=> Wed Mar 25 2020 00:00:00\n */\n\nexport default function nextWednesday(date) {\n  requiredArgs(1, arguments);\n  return nextDay(date, 3);\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name parseJSON\n * @category Common Helpers\n * @summary Parse a JSON date string\n *\n * @description\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\n * a date in JSON, to a JavaScript `Date` instance.\n *\n * This is a minimal implementation for converting dates retrieved from a JSON API to\n * a `Date` instance which can be used with other functions in the `date-fns` library.\n * The following formats are supported:\n *\n * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n * - `2000-03-15T05:20:10Z`: Without milliseconds\n * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n *\n * For convenience and ease of use these other input types are also supported\n * via [toDate]{@link https://date-fns.org/docs/toDate}:\n *\n * - A `Date` instance will be cloned\n * - A `number` will be treated as a timestamp\n *\n * Any other input type or invalid date strings will return an `Invalid Date`.\n *\n * @param {String|Number|Date} argument A fully formed ISO8601 date string to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n */\n\nexport default function parseJSON(argument) {\n  requiredArgs(1, arguments);\n\n  if (typeof argument === 'string') {\n    var parts = argument.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/);\n\n    if (parts) {\n      // Group 8 matches the sign\n      return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == '-' ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == '-' ? -1 : 1), +parts[6], +((parts[7] || '0') + '00').substring(0, 3)));\n    }\n\n    return new Date(NaN);\n  }\n\n  return toDate(argument);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport subDays from \"../subDays/index.js\";\n\n/**\n * @name previousDay\n * @category Weekday Helpers\n * @summary When is the previous day of the week?\n *\n * @description\n * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {number} day - day of the week\n * @returns {Date} - the date is the previous day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the previous Monday before Mar, 20, 2020?\n * const result = previousDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 16 2020 00:00:00\n *\n * @example\n * // When is the previous Tuesday before Mar, 21, 2020?\n * const result = previousDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 17 2020 00:00:00\n */\nexport default function previousDay(date, day) {\n  requiredArgs(2, arguments);\n  var delta = getDay(date) - day;\n  if (delta <= 0) delta += 7;\n  return subDays(date, delta);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousFriday\n * @category Weekday Helpers\n * @summary When is the previous Friday?\n *\n * @description\n * When is the previous Friday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Friday before Jun, 19, 2021?\n * const result = previousFriday(new Date(2021, 5, 19))\n * //=> Fri June 18 2021 00:00:00\n */\n\nexport default function previousFriday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 5);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousMonday\n * @category Weekday Helpers\n * @summary When is the previous Monday?\n *\n * @description\n * When is the previous Monday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Monday before Jun, 18, 2021?\n * const result = previousMonday(new Date(2021, 5, 18))\n * //=> Mon June 14 2021 00:00:00\n */\n\nexport default function previousMonday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 1);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousSaturday\n * @category Weekday Helpers\n * @summary When is the previous Saturday?\n *\n * @description\n * When is the previous Saturday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Saturday before Jun, 20, 2021?\n * const result = previousSaturday(new Date(2021, 5, 20))\n * //=> Sat June 19 2021 00:00:00\n */\n\nexport default function previousSaturday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 6);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousSunday\n * @category Weekday Helpers\n * @summary When is the previous Sunday?\n *\n * @description\n * When is the previous Sunday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Sunday before Jun, 21, 2021?\n * const result = previousSunday(new Date(2021, 5, 21))\n * //=> Sun June 20 2021 00:00:00\n */\n\nexport default function previousSunday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 0);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousThursday\n * @category Weekday Helpers\n * @summary When is the previous Thursday?\n *\n * @description\n * When is the previous Thursday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Thursday before Jun, 18, 2021?\n * const result = previousThursday(new Date(2021, 5, 18))\n * //=> Thu June 17 2021 00:00:00\n */\n\nexport default function previousThursday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 4);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousTuesday\n * @category Weekday Helpers\n * @summary When is the previous Tuesday?\n *\n * @description\n * When is the previous Tuesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Tuesday before Jun, 18, 2021?\n * const result = previousTuesday(new Date(2021, 5, 18))\n * //=> Tue June 15 2021 00:00:00\n */\n\nexport default function previousTuesday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 2);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousWednesday\n * @category Weekday Helpers\n * @summary When is the previous Wednesday?\n *\n * @description\n * When is the previous Wednesday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Wednesday before Jun, 18, 2021?\n * const result = previousWednesday(new Date(2021, 5, 18))\n * //=> Wed June 16 2021 00:00:00\n */\n\nexport default function previousWednesday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 3);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInQuarter } from \"../constants/index.js\";\n/**\n * @name quartersToMonths\n * @category Conversion Helpers\n * @summary Convert number of quarters to months.\n *\n * @description\n * Convert a number of quarters to a full number of months.\n *\n * @param {number} quarters - number of quarters to be converted\n *\n * @returns {number} the number of quarters converted in months\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 quarters to months\n * const result = quartersToMonths(2)\n * //=> 6\n */\n\nexport default function quartersToMonths(quarters) {\n  requiredArgs(1, arguments);\n  return Math.floor(quarters * monthsInQuarter);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { quartersInYear } from \"../constants/index.js\";\n/**\n * @name quartersToYears\n * @category Conversion Helpers\n * @summary Convert number of quarters to years.\n *\n * @description\n * Convert a number of quarters to a full number of years.\n *\n * @param {number} quarters - number of quarters to be converted\n *\n * @returns {number} the number of quarters converted in years\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 8 quarters to years\n * const result = quartersToYears(8)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = quartersToYears(11)\n * //=> 2\n */\n\nexport default function quartersToYears(quarters) {\n  requiredArgs(1, arguments);\n  var years = quarters / quartersInYear;\n  return Math.floor(years);\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to round\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.nearestTo=1] - nearest number of minutes to round to. E.g. `15` to round to quarter hours.\n * @returns {Date} the new date rounded to the closest minute\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.nearestTo` must be between 1 and 30\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\n\nexport default function roundToNearestMinutes(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only none provided present');\n  }\n\n  var nearestTo = options && 'nearestTo' in options ? toInteger(options.nearestTo) : 1;\n\n  if (nearestTo < 1 || nearestTo > 30) {\n    throw new RangeError('`options.nearestTo` must be between 1 and 30');\n  }\n\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n\n  var minutes = date.getMinutes() + seconds / 60;\n  var roundedMinutes = Math.floor(minutes / nearestTo) * nearestTo;\n  var remainderMinutes = minutes % nearestTo;\n  var addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), roundedMinutes + addedMinutes);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInHour } from \"../constants/index.js\";\n/**\n * @name secondsToHours\n * @category Conversion Helpers\n * @summary Convert seconds to hours.\n *\n * @description\n * Convert a number of seconds to a full number of hours.\n *\n * @param {number} seconds - number of seconds to be converted\n *\n * @returns {number} the number of seconds converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 7200 seconds into hours\n * const result = secondsToHours(7200)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = secondsToHours(7199)\n * //=> 1\n */\n\nexport default function secondsToHours(seconds) {\n  requiredArgs(1, arguments);\n  var hours = seconds / secondsInHour;\n  return Math.floor(hours);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { millisecondsInSecond } from \"../constants/index.js\";\n/**\n * @name secondsToMilliseconds\n * @category Conversion Helpers\n * @summary Convert seconds to milliseconds.\n *\n * @description\n * Convert a number of seconds to a full number of milliseconds.\n *\n * @param {number} seconds - number of seconds to be converted\n *\n * @returns {number} the number of seconds converted in milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 seconds into milliseconds\n * const result = secondsToMilliseconds(2)\n * //=> 2000\n */\n\nexport default function secondsToMilliseconds(seconds) {\n  requiredArgs(1, arguments);\n  return seconds * millisecondsInSecond;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { secondsInMinute } from \"../constants/index.js\";\n/**\n * @name secondsToMinutes\n * @category Conversion Helpers\n * @summary Convert seconds to minutes.\n *\n * @description\n * Convert a number of seconds to a full number of minutes.\n *\n * @param {number} seconds - number of seconds to be converted\n *\n * @returns {number} the number of seconds converted in minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 120 seconds into minutes\n * const result = secondsToMinutes(120)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = secondsToMinutes(119)\n * //=> 1\n */\n\nexport default function secondsToMinutes(seconds) {\n  requiredArgs(1, arguments);\n  var minutes = seconds / secondsInMinute;\n  return Math.floor(minutes);\n}","import toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getDaysInMonth from \"../getDaysInMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setDate\n * @category Day Helpers\n * @summary Set the day of the month to the given date.\n *\n * @description\n * Set the day of the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfMonth - the day of the month of the new date\n * @returns {Date} the new date with the day of the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 30th day of the month to 1 September 2014:\n * var result = setDate(new Date(2014, 8, 1), 30)\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function setDate(dirtyDate, dirtyDayOfMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = toInteger(dirtyDayOfMonth);\n  date.setDate(dayOfMonth);\n  return date;\n}","import addDays from \"../addDays/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the new date with the day of the week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * var result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * var result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport default function setDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var delta = 7 - weekStartsOn;\n  var diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;\n  return addDays(date, diff);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setDayOfYear\n * @category Day Helpers\n * @summary Set the day of the year to the given date.\n *\n * @description\n * Set the day of the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfYear - the day of the year of the new date\n * @returns {Date} the new date with the day of the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd day of the year to 2 July 2014:\n * var result = setDayOfYear(new Date(2014, 6, 2), 2)\n * //=> Thu Jan 02 2014 00:00:00\n */\n\nexport default function setDayOfYear(dirtyDate, dirtyDayOfYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfYear = toInteger(dirtyDayOfYear);\n  date.setMonth(0);\n  date.setDate(dayOfYear);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport getISODay from \"../getISODay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday etc.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the ISO week of the new date\n * @returns {Date} the new date with the day of the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function setISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = getISODay(date);\n  var diff = day - currentDay;\n  return addDays(date, diff);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getISOWeek from \"../getISOWeek/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeek - the ISO week of the new date\n * @returns {Date} the new date with the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\n\nexport default function setISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getISOWeek(date) - isoWeek;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMilliseconds\n * @category Millisecond Helpers\n * @summary Set the milliseconds to the given date.\n *\n * @description\n * Set the milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} milliseconds - the milliseconds of the new date\n * @returns {Date} the new date with the milliseconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 300 milliseconds to 1 September 2014 11:30:40.500:\n * const result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)\n * //=> Mon Sep 01 2014 11:30:40.300\n */\n\nexport default function setMilliseconds(dirtyDate, dirtyMilliseconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = toInteger(dirtyMilliseconds);\n  date.setMilliseconds(milliseconds);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setQuarter\n * @category Quarter Helpers\n * @summary Set the year quarter to the given date.\n *\n * @description\n * Set the year quarter to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} quarter - the quarter of the new date\n * @returns {Date} the new date with the quarter set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd quarter to 2 July 2014:\n * const result = setQuarter(new Date(2014, 6, 2), 2)\n * //=> Wed Apr 02 2014 00:00:00\n */\n\nexport default function setQuarter(dirtyDate, dirtyQuarter) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = toInteger(dirtyQuarter);\n  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;\n  var diff = quarter - oldQuarter;\n  return setMonth(date, date.getMonth() + diff * 3);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import getWeek from \"../getWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} week - the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * var result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * var result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport default function setWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getWeek(date, options) - week;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport startOfWeekYear from \"../startOfWeekYear/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} weekYear - the local week-numbering year of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week-numbering year set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport default function setWeekYear(dirtyDate, dirtyWeekYear) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var date = toDate(dirtyDate);\n  var weekYear = toInteger(dirtyWeekYear);\n  var diff = differenceInCalendarDays(date, startOfWeekYear(date, options));\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  date = startOfWeekYear(firstWeek, options);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * const result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDecade\n * @category Decade Helpers\n * @summary Return the start of a decade for the given date.\n *\n * @description\n * Return the start of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a decade for 21 October 2015 00:00:00:\n * const result = startOfDecade(new Date(2015, 9, 21, 00, 00, 00))\n * //=> Jan 01 2010 00:00:00\n */\n\nexport default function startOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from \"../startOfDay/index.js\";\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\n\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}","/**\n * @name startOfTomorrow\n * @category Day Helpers\n * @summary Return the start of tomorrow.\n * @pure false\n *\n * @description\n * Return the start of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfTomorrow()\n * //=> Tue Oct 7 2014 00:00:00\n */\nexport default function startOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","/**\n * @name startOfYesterday\n * @category Day Helpers\n * @summary Return the start of yesterday.\n * @pure false\n *\n * @description\n * Return the start of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfYesterday()\n * //=> Sun Oct 5 2014 00:00:00\n */\nexport default function startOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import addBusinessDays from \"../addBusinessDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subBusinessDays\n * @category Day Helpers\n * @summary Substract the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Substract the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Substract 10 business days from 1 September 2014:\n * const result = subBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function subBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addBusinessDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addHours from \"../addHours/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\n\nexport default function subHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addHours(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMinutes from \"../addMinutes/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nexport default function subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addQuarters from \"../addQuarters/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subQuarters\n * @category Quarter Helpers\n * @summary Subtract the specified number of year quarters from the given date.\n *\n * @description\n * Subtract the specified number of year quarters from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 3 quarters from 1 September 2014:\n * const result = subQuarters(new Date(2014, 8, 1), 3)\n * //=> Sun Dec 01 2013 00:00:00\n */\n\nexport default function subQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addQuarters(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addSeconds from \"../addSeconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subSeconds\n * @category Second Helpers\n * @summary Subtract the specified number of seconds from the given date.\n *\n * @description\n * Subtract the specified number of seconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\n * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:44:30\n */\n\nexport default function subSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addSeconds(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addWeeks from \"../addWeeks/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * const result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\n\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addYears from \"../addYears/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * const result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { daysInWeek } from \"../constants/index.js\";\n/**\n * @name weeksToDays\n * @category Conversion Helpers\n * @summary Convert weeks to days.\n *\n * @description\n * Convert a number of weeks to a full number of days.\n *\n * @param {number} weeks - number of weeks to be converted\n *\n * @returns {number} the number of weeks converted in days\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 weeks into days\n * const result = weeksToDays(2)\n * //=> 14\n */\n\nexport default function weeksToDays(weeks) {\n  requiredArgs(1, arguments);\n  return Math.floor(weeks * daysInWeek);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { monthsInYear } from \"../constants/index.js\";\n/**\n * @name yearsToMonths\n * @category Conversion Helpers\n * @summary Convert years to months.\n *\n * @description\n * Convert a number of years to a full number of months.\n *\n * @param {number} years - number of years to be converted\n *\n * @returns {number} the number of years converted in months\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 years into months\n * const result = yearsToMonths(2)\n * //=> 24\n */\n\nexport default function yearsToMonths(years) {\n  requiredArgs(1, arguments);\n  return Math.floor(years * monthsInYear);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { quartersInYear } from \"../constants/index.js\";\n/**\n * @name yearsToQuarters\n * @category Conversion Helpers\n * @summary Convert years to quarters.\n *\n * @description\n * Convert a number of years to a full number of quarters.\n *\n * @param {number} years - number of years to be converted\n *\n * @returns {number} the number of years converted in quarters\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 2 years to quarters\n * const result = yearsToQuarters(2)\n * //=> 8\n */\n\nexport default function yearsToQuarters(years) {\n  requiredArgs(1, arguments);\n  return Math.floor(years * quartersInYear);\n}","/*! js-cookie v3.0.1 | MIT */\n;\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, (function () {\n    var current = global.Cookies;\n    var exports = global.Cookies = factory();\n    exports.noConflict = function () { global.Cookies = current; return exports; };\n  }()));\n}(this, (function () { 'use strict';\n\n  /* eslint-disable no-var */\n  function assign (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    }\n    return target\n  }\n  /* eslint-enable no-var */\n\n  /* eslint-disable no-var */\n  var defaultConverter = {\n    read: function (value) {\n      if (value[0] === '\"') {\n        value = value.slice(1, -1);\n      }\n      return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent)\n    },\n    write: function (value) {\n      return encodeURIComponent(value).replace(\n        /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,\n        decodeURIComponent\n      )\n    }\n  };\n  /* eslint-enable no-var */\n\n  /* eslint-disable no-var */\n\n  function init (converter, defaultAttributes) {\n    function set (key, value, attributes) {\n      if (typeof document === 'undefined') {\n        return\n      }\n\n      attributes = assign({}, defaultAttributes, attributes);\n\n      if (typeof attributes.expires === 'number') {\n        attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n      }\n      if (attributes.expires) {\n        attributes.expires = attributes.expires.toUTCString();\n      }\n\n      key = encodeURIComponent(key)\n        .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n        .replace(/[()]/g, escape);\n\n      var stringifiedAttributes = '';\n      for (var attributeName in attributes) {\n        if (!attributes[attributeName]) {\n          continue\n        }\n\n        stringifiedAttributes += '; ' + attributeName;\n\n        if (attributes[attributeName] === true) {\n          continue\n        }\n\n        // Considers RFC 6265 section 5.2:\n        // ...\n        // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n        //     character:\n        // Consume the characters of the unparsed-attributes up to,\n        // not including, the first %x3B (\";\") character.\n        // ...\n        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n      }\n\n      return (document.cookie =\n        key + '=' + converter.write(value, key) + stringifiedAttributes)\n    }\n\n    function get (key) {\n      if (typeof document === 'undefined' || (arguments.length && !key)) {\n        return\n      }\n\n      // To prevent the for loop in the first place assign an empty array\n      // in case there are no cookies at all.\n      var cookies = document.cookie ? document.cookie.split('; ') : [];\n      var jar = {};\n      for (var i = 0; i < cookies.length; i++) {\n        var parts = cookies[i].split('=');\n        var value = parts.slice(1).join('=');\n\n        try {\n          var foundKey = decodeURIComponent(parts[0]);\n          jar[foundKey] = converter.read(value, foundKey);\n\n          if (key === foundKey) {\n            break\n          }\n        } catch (e) {}\n      }\n\n      return key ? jar[key] : jar\n    }\n\n    return Object.create(\n      {\n        set: set,\n        get: get,\n        remove: function (key, attributes) {\n          set(\n            key,\n            '',\n            assign({}, attributes, {\n              expires: -1\n            })\n          );\n        },\n        withAttributes: function (attributes) {\n          return init(this.converter, assign({}, this.attributes, attributes))\n        },\n        withConverter: function (converter) {\n          return init(assign({}, this.converter, converter), this.attributes)\n        }\n      },\n      {\n        attributes: { value: Object.freeze(defaultAttributes) },\n        converter: { value: Object.freeze(converter) }\n      }\n    )\n  }\n\n  var api = init(defaultConverter, { path: '/' });\n  /* eslint-enable no-var */\n\n  return api;\n\n})));\n","import {getWeather, savedCities} from \"./main.js\";\nimport {UI_ELEMENTS, deleteCityByHeartCloseUI} from \"./view.js\";\nimport Cookies from 'js-cookie';\n\nexport class Storage {\n    constructor(name) {\n        this.name = name;\n    }\n\n    set(key = 'favoriteCities') {\n        localStorage.setItem(key, this.name);\n    }\n\n    get(key = 'favoriteCities') {\n        return JSON.parse(localStorage.getItem(key));\n    }\n}\n\n\nexport async function showSavedCitiesOnReload() {\n    const names = new Storage();\n    const cities = names.get();\n\n    async function addCityUI(cities) {\n        if (cities && cities.length) {\n            savedCities.add(cities[0]);\n            renderCityUI(cities[0]);\n            await cities.shift();\n\n            return await addCityUI(cities);\n        }\n    }\n\n    await addCityUI(cities);\n\n    switchBetweenRenderedCities();\n    await showLastSelectedCity();\n    deleteCityByHEARTClose();\n}\n\nfunction renderCityUI(city) {\n    const templateCity = UI_ELEMENTS.TEMPLATE_ELEMENT.CITY_ITEM.content.cloneNode(true);\n    templateCity.firstElementChild.firstElementChild.textContent = city;\n    UI_ELEMENTS.CITY_LIST.append(templateCity);\n}\n\nfunction switchBetweenRenderedCities() {\n    const cityNames = document.querySelectorAll('.city');\n\n    cityNames.forEach(cityName => {\n        cityName.addEventListener('click', async function () {\n            const city = this.textContent;\n            await getWeather(city);\n        });\n    });\n}\n\nasync function showLastSelectedCity() {\n    const lastSelectedCity = Cookies.get('currentCity');\n    if (lastSelectedCity) {\n        await getWeather(lastSelectedCity);\n    }\n}\n\nfunction deleteCityByHEARTClose() {\n    const cityNames = document.querySelectorAll('.city-list__item');\n\n    cityNames.forEach(cityName => {\n        cityName.lastElementChild.addEventListener('click', function () {\n            savedCities.delete(this.previousElementSibling.textContent);\n            localStorage.setItem('favoriteCities', JSON.stringify([...savedCities]));\n\n            deleteCityByHeartCloseUI(this);\n        });\n    });\n}\n"],"names":[],"version":3,"file":"index.fbb3188c.js.map","sourceRoot":"/__parcel_source_root/"}